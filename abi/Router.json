{
  "abi": [
    {
      "type": "constructor",
      "inputs": [
        { "name": "_WETH", "type": "address", "internalType": "address" },
        { "name": "_owner", "type": "address", "internalType": "address" },
        { "name": "_factory", "type": "address", "internalType": "address" }
      ],
      "stateMutability": "nonpayable"
    },
    { "type": "receive", "stateMutability": "payable" },
    {
      "type": "function",
      "name": "CODE_HASH",
      "inputs": [],
      "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "DYSON_FACTORY",
      "inputs": [],
      "outputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "WETH",
      "inputs": [],
      "outputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "deposit",
      "inputs": [
        { "name": "tokenIn", "type": "address", "internalType": "address" },
        { "name": "tokenOut", "type": "address", "internalType": "address" },
        { "name": "index", "type": "uint256", "internalType": "uint256" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "input", "type": "uint256", "internalType": "uint256" },
        { "name": "minOutput", "type": "uint256", "internalType": "uint256" },
        { "name": "time", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [
        { "name": "output", "type": "uint256", "internalType": "uint256" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "depositETH",
      "inputs": [
        { "name": "tokenOut", "type": "address", "internalType": "address" },
        { "name": "index", "type": "uint256", "internalType": "uint256" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "minOutput", "type": "uint256", "internalType": "uint256" },
        { "name": "time", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [
        { "name": "output", "type": "uint256", "internalType": "uint256" }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "fairPrice",
      "inputs": [
        { "name": "pair", "type": "address", "internalType": "address" },
        { "name": "token0Amt", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [
        { "name": "token1Amt", "type": "uint256", "internalType": "uint256" }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "multicall",
      "inputs": [
        { "name": "data", "type": "bytes[]", "internalType": "bytes[]" }
      ],
      "outputs": [
        { "name": "results", "type": "bytes[]", "internalType": "bytes[]" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "owner",
      "inputs": [],
      "outputs": [{ "name": "", "type": "address", "internalType": "address" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "rely",
      "inputs": [
        {
          "name": "tokenAddress",
          "type": "address",
          "internalType": "address"
        },
        {
          "name": "contractAddress",
          "type": "address",
          "internalType": "address"
        },
        { "name": "enable", "type": "bool", "internalType": "bool" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "rescueERC20",
      "inputs": [
        {
          "name": "tokenAddress",
          "type": "address",
          "internalType": "address"
        },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "amount", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "selfPermit",
      "inputs": [
        { "name": "token", "type": "address", "internalType": "address" },
        { "name": "value", "type": "uint256", "internalType": "uint256" },
        { "name": "deadline", "type": "uint256", "internalType": "uint256" },
        { "name": "v", "type": "uint8", "internalType": "uint8" },
        { "name": "r", "type": "bytes32", "internalType": "bytes32" },
        { "name": "s", "type": "bytes32", "internalType": "bytes32" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "setApprovalForAllWithSig",
      "inputs": [
        { "name": "pair", "type": "address", "internalType": "address" },
        { "name": "approved", "type": "bool", "internalType": "bool" },
        { "name": "deadline", "type": "uint256", "internalType": "uint256" },
        { "name": "sig", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "swap",
      "inputs": [
        { "name": "tokenIn", "type": "address", "internalType": "address" },
        { "name": "tokenOut", "type": "address", "internalType": "address" },
        { "name": "index", "type": "uint256", "internalType": "uint256" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "input", "type": "uint256", "internalType": "uint256" },
        { "name": "minOutput", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [
        { "name": "output", "type": "uint256", "internalType": "uint256" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "swapETHIn",
      "inputs": [
        { "name": "tokenOut", "type": "address", "internalType": "address" },
        { "name": "index", "type": "uint256", "internalType": "uint256" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "minOutput", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [
        { "name": "output", "type": "uint256", "internalType": "uint256" }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "swapETHInWithMultiHops",
      "inputs": [
        { "name": "tokens", "type": "address[]", "internalType": "address[]" },
        { "name": "indexes", "type": "uint256[]", "internalType": "uint256[]" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "minOutput", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [
        { "name": "output", "type": "uint256", "internalType": "uint256" }
      ],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "swapETHOut",
      "inputs": [
        { "name": "tokenIn", "type": "address", "internalType": "address" },
        { "name": "index", "type": "uint256", "internalType": "uint256" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "input", "type": "uint256", "internalType": "uint256" },
        { "name": "minOutput", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [
        { "name": "output", "type": "uint256", "internalType": "uint256" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "swapETHOutWithMultiHops",
      "inputs": [
        { "name": "tokens", "type": "address[]", "internalType": "address[]" },
        { "name": "indexes", "type": "uint256[]", "internalType": "uint256[]" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "input", "type": "uint256", "internalType": "uint256" },
        { "name": "minOutput", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [
        { "name": "output", "type": "uint256", "internalType": "uint256" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "swapWithMultiHops",
      "inputs": [
        { "name": "tokens", "type": "address[]", "internalType": "address[]" },
        { "name": "indexes", "type": "uint256[]", "internalType": "uint256[]" },
        { "name": "to", "type": "address", "internalType": "address" },
        { "name": "input", "type": "uint256", "internalType": "uint256" },
        { "name": "minOutput", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [
        { "name": "output", "type": "uint256", "internalType": "uint256" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "transferOwnership",
      "inputs": [
        { "name": "_owner", "type": "address", "internalType": "address" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "withdraw",
      "inputs": [
        { "name": "pair", "type": "address", "internalType": "address" },
        { "name": "index", "type": "uint256", "internalType": "uint256" },
        { "name": "to", "type": "address", "internalType": "address" }
      ],
      "outputs": [
        { "name": "token0Amt", "type": "uint256", "internalType": "uint256" },
        { "name": "token1Amt", "type": "uint256", "internalType": "uint256" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "withdrawETH",
      "inputs": [
        { "name": "pair", "type": "address", "internalType": "address" },
        { "name": "index", "type": "uint256", "internalType": "uint256" },
        { "name": "to", "type": "address", "internalType": "address" }
      ],
      "outputs": [
        { "name": "token0Amt", "type": "uint256", "internalType": "uint256" },
        { "name": "token1Amt", "type": "uint256", "internalType": "uint256" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "withdrawMultiPositions",
      "inputs": [
        { "name": "pairs", "type": "address[]", "internalType": "address[]" },
        { "name": "indexes", "type": "uint256[]", "internalType": "uint256[]" },
        { "name": "tos", "type": "address[]", "internalType": "address[]" }
      ],
      "outputs": [
        {
          "name": "token0Amounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        },
        {
          "name": "token1Amounts",
          "type": "uint256[]",
          "internalType": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "event",
      "name": "TransferOwnership",
      "inputs": [
        {
          "name": "newOwner",
          "type": "address",
          "indexed": false,
          "internalType": "address"
        }
      ],
      "anonymous": false
    }
  ],
  "bytecode": {
    "object": "0x60e06040523480156200001157600080fd5b5060405162002d9638038062002d9683398101604081905262000034916200018c565b6001600160a01b038216620000905760405162461bcd60e51b815260206004820152601460248201527f6f776e65722063616e6e6f74206265207a65726f00000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038316620000d75760405162461bcd60e51b815260206004820152600c60248201526b0d2dcecc2d8d2c840ae8aa8960a31b604482015260640162000087565b6001600160a01b03838116608052600080546001600160a01b031916848316179055811660a081905260408051635431927d60e01b81529051635431927d916004808201926020929091908290030181865afa1580156200013c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001629190620001d6565b60c05250620001f0915050565b80516001600160a01b03811681146200018757600080fd5b919050565b600080600060608486031215620001a257600080fd5b620001ad846200016f565b9250620001bd602085016200016f565b9150620001cd604085016200016f565b90509250925092565b600060208284031215620001e957600080fd5b5051919050565b60805160a05160c051612b0d62000289600039600081816101d2015281816115dc0152611ae8015260008181610226015281816115bb0152611ac7015260008181610149015281816103b5015281816104e50152818161058d01528181610733015281816108ed0152818161101e01528181611087015281816110fe015281816115170152818161158e015261187d0152612b0d6000f3fe6080604052600436106101395760003560e01c80638865305b116100ab578063c58b6a101161006f578063c58b6a10146103f7578063d29f140914610417578063f2fde38b14610437578063f3995c6714610457578063f5eacc2f14610477578063fecc1b9f1461049757600080fd5b80638865305b146103435780638da5cb5b14610356578063ac9650d814610376578063ad5c4648146103a3578063b2118a8d146103d757600080fd5b8063687a0b10116100fd578063687a0b101461026057806369328dec146102805780636d3a957c146102b55780636d48058e146102e35780637129b6401461030357806380500d201461032357600080fd5b806301c838fe1461017a5780630cd19cbe146101a05780630dff1165146101c057806312713bd2146101f4578063429d9b1d1461021457600080fd5b3661017557336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461017357600080fd5b005b600080fd5b61018d61018836600461201f565b6104aa565b6040519081526020015b60405180910390f35b3480156101ac57600080fd5b5061018d6101bb3660046120aa565b610716565b3480156101cc57600080fd5b5061018d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561020057600080fd5b5061018d61020f3660046120fc565b610770565b34801561022057600080fd5b506102487f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610197565b34801561026c57600080fd5b5061018d61027b366004612128565b6108bb565b34801561028c57600080fd5b506102a061029b3660046121bd565b610ae2565b60408051928352602083019190915201610197565b3480156102c157600080fd5b506102d56102d03660046121ff565b610b6b565b6040516101979291906122d3565b3480156102ef57600080fd5b5061018d6102fe366004612128565b610d7e565b34801561030f57600080fd5b5061018d61031e3660046122f8565b610e7c565b34801561032f57600080fd5b506102a061033e3660046121bd565b610eac565b61018d6103513660046120aa565b611083565b34801561036257600080fd5b50600054610248906001600160a01b031681565b34801561038257600080fd5b5061039661039136600461235d565b611132565b60405161019791906123ee565b3480156103af57600080fd5b506102487f000000000000000000000000000000000000000000000000000000000000000081565b3480156103e357600080fd5b506101736103f2366004612450565b611289565b34801561040357600080fd5b5061017361041236600461249f565b6112cc565b34801561042357600080fd5b5061018d6104323660046124df565b61131b565b34801561044357600080fd5b5061017361045236600461254d565b61134d565b34801561046357600080fd5b50610173610472366004612571565b611418565b34801561048357600080fd5b506101736104923660046125b9565b6114a4565b61018d6104a5366004612657565b611513565b60008380158015906104be57506001810187145b6104e35760405162461bcd60e51b81526004016104da9061269f565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031688886000818110610520576105206126d6565b9050602002016020810190610535919061254d565b6001600160a01b03161461058b5760405162461bcd60e51b815260206004820152601860248201527f666972737420746f6b656e206d7573742062652057455448000000000000000060448201526064016104da565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156105e657600080fd5b505af11580156105fa573d6000803e3d6000fd5b503493506001925050505b82811015610690576106868a8a60018403818110610625576106256126d6565b905060200201602081019061063a919061254d565b8b8b8481811061064c5761064c6126d6565b9050602002016020810190610661919061254d565b8a8a60018603818110610676576106766126d6565b90506020020135308660006115b3565b9150600101610605565b6107088a8a600184038181106106a8576106a86126d6565b90506020020160208101906106bd919061254d565b8b8b848181106106cf576106cf6126d6565b90506020020160208101906106e4919061254d565b8a8a600186038181106106f9576106f96126d6565b9050602002013589868a6115b3565b9a9950505050505050505050565b600061072d6001600160a01b038716333086611737565b61075b867f0000000000000000000000000000000000000000000000000000000000000000873087876115b3565b90506107678482611867565b95945050505050565b6000806000846001600160a01b0316630902f1ac6040518163ffffffff1660e01b81526004016040805180830381865afa1580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d691906126ec565b91509150600080866001600160a01b03166359362b886040518163ffffffff1660e01b81526004016040805180830381865afa15801561081a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083e9190612727565b9092509050838361089a61085f6001600160401b038516600160401b612770565b6108766001600160401b038716600160401b612770565b61088160028c612867565b61088b9190612876565b610895919061288d565b6118f9565b6108a49190612876565b6108ae919061288d565b9450505050505b92915050565b60008480158015906108cf57506001810188145b6108eb5760405162461bcd60e51b81526004016104da9061269f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316898983818110610927576109276126d6565b905060200201602081019061093c919061254d565b6001600160a01b0316146109925760405162461bcd60e51b815260206004820152601760248201527f6c61737420746f6b656e206d757374206265205745544800000000000000000060448201526064016104da565b6109d13330868c8c60008181106109ab576109ab6126d6565b90506020020160208101906109c0919061254d565b6001600160a01b0316929190611737565b8360015b82811015610a5057610a468b8b600184038181106109f5576109f56126d6565b9050602002016020810190610a0a919061254d565b8c8c84818110610a1c57610a1c6126d6565b9050602002016020810190610a31919061254d565b8b8b60018603818110610676576106766126d6565b91506001016109d5565b610ac88b8b60018403818110610a6857610a686126d6565b9050602002016020810190610a7d919061254d565b8c8c84818110610a8f57610a8f6126d6565b9050602002016020810190610aa4919061254d565b8b8b60018603818110610ab957610ab96126d6565b9050602002013530868a6115b3565b9350610ad48785611867565b505050979650505050505050565b60405163e162402f60e01b8152336004820152602481018390526001600160a01b038281166044830152600091829186169063e162402f9060640160408051808303816000875af1158015610b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5f91906126ec565b91509150935093915050565b606080868581148015610b7d57508084145b610b995760405162461bcd60e51b81526004016104da9061269f565b6000816001600160401b03811115610bb357610bb36128af565b604051908082528060200260200182016040528015610bdc578160200160208202803683370190505b5090506000826001600160401b03811115610bf957610bf96128af565b604051908082528060200260200182016040528015610c22578160200160208202803683370190505b50905060005b83811015610d6d576000808d8d84818110610c4557610c456126d6565b9050602002016020810190610c5a919061254d565b6001600160a01b031663e162402f338e8e87818110610c7b57610c7b6126d6565b905060200201358d8d88818110610c9457610c946126d6565b9050602002016020810190610ca9919061254d565b60405160e085901b6001600160e01b03191681526001600160a01b0393841660048201526024810192909252909116604482015260640160408051808303816000875af1158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2291906126ec565b9150915081858481518110610d3957610d396126d6565b60200260200101818152505080848481518110610d5857610d586126d6565b60209081029190910101525050600101610c28565b50909a909950975050505050505050565b6000848015801590610d9257506001810188145b610dae5760405162461bcd60e51b81526004016104da9061269f565b610dc73330868c8c60008181106109ab576109ab6126d6565b8360015b82811015610df557610deb8b8b600184038181106109f5576109f56126d6565b9150600101610dcb565b610e6d8b8b60018403818110610e0d57610e0d6126d6565b9050602002016020810190610e22919061254d565b8c8c84818110610e3457610e346126d6565b9050602002016020810190610e49919061254d565b8b8b60018603818110610e5e57610e5e6126d6565b905060200201358a868a6115b3565b9b9a5050505050505050505050565b6000610e936001600160a01b038816333086611737565b610ea18787878787876115b3565b979650505050505050565b60405163e162402f60e01b81523360048201526024810183905230604482015260009081906001600160a01b0386169063e162402f9060640160408051808303816000875af1158015610f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2791906126ec565b80925081935050506000856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9391906128c5565b9050600080841161100557866001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fdc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100091906128c5565b611007565b815b90506000808511611018578361101a565b845b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316036110645761105f8682611867565b611078565b6110786001600160a01b03831687836119a4565b505050935093915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156110e057600080fd5b505af11580156110f4573d6000803e3d6000fd5b50505050506111287f0000000000000000000000000000000000000000000000000000000000000000878787348888611abf565b9695505050505050565b606081806001600160401b0381111561114d5761114d6128af565b60405190808252806020026020018201604052801561118057816020015b606081526020019060019003908161116b5790505b50915060005b8181101561128157600080308787858181106111a4576111a46126d6565b90506020028101906111b691906128e2565b6040516111c4929190612928565b600060405180830381855af49150503d80600081146111ff576040519150601f19603f3d011682016040523d82523d6000602084013e611204565b606091505b5091509150816112505760448151101561121d57600080fd5b600481019050808060200190518101906112379190612938565b60405162461bcd60e51b81526004016104da91906129d9565b80858481518110611263576112636126d6565b602002602001018190525050508061127a906129ec565b9050611186565b505092915050565b6000546001600160a01b031633146112b35760405162461bcd60e51b81526004016104da90612a05565b6112c76001600160a01b03841683836119a4565b505050565b6000546001600160a01b031633146112f65760405162461bcd60e51b81526004016104da90612a05565b6112c7828261130657600061130a565b6000195b6001600160a01b0386169190611c52565b60006113326001600160a01b038916333087611737565b61134188888888888888611abf565b98975050505050505050565b6000546001600160a01b031633146113775760405162461bcd60e51b81526004016104da90612a05565b6001600160a01b0381166113c45760405162461bcd60e51b81526020600482015260146024820152736f776e65722063616e6e6f74206265207a65726f60601b60448201526064016104da565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a150565b60405163d505accf60e01b8152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290526001600160a01b0387169063d505accf9060e401600060405180830381600087803b15801561148457600080fd5b505af1158015611498573d6000803e3d6000fd5b50505050505050505050565b604051631edfa7eb60e21b81526001600160a01b03861690637b7e9fac906114da90339030908990899089908990600401612a28565b600060405180830381600087803b1580156114f457600080fd5b505af1158015611508573d6000803e3d6000fd5b505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561157057600080fd5b505af1158015611584573d6000803e3d6000fd5b50505050506107677f000000000000000000000000000000000000000000000000000000000000000086868634875b6000806116037f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008a8a8a611d66565b905060006116118989611e2c565b509050806001600160a01b0316896001600160a01b0316036116ae5760405163a9d9db4d60e01b81526001600160a01b038781166004830152602482018790526044820186905283169063a9d9db4d906064016020604051808303816000875af1158015611683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a79190612a85565b925061172b565b6040516353d56bf560e01b81526001600160a01b03878116600483015260248201879052604482018690528316906353d56bf5906064016020604051808303816000875af1158015611704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117289190612a85565b92505b50509695505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161179b9190612a9e565b6000604051808303816000865af19150503d80600081146117d8576040519150601f19603f3d011682016040523d82523d6000602084013e6117dd565b606091505b50915091508180156118075750805115806118075750808060200190518101906118079190612aba565b61185f5760405162461bcd60e51b815260206004820152602360248201527f7472616e7366657248656c7065723a207472616e7366657246726f6d206661696044820152621b195960ea1b60648201526084016104da565b505050505050565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156118c957600080fd5b505af11580156118dd573d6000803e3d6000fd5b506118f5925050506001600160a01b03831682611efa565b5050565b60b581600160881b81106119125760409190911b9060801c5b6901000000000000000000811061192e5760209190911b9060401c5b6501000000000081106119465760109190911b9060201c5b6301000000811061195c5760089190911b9060101c5b62010000010260121c80820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c80820481111561199f5781045b919050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691611a009190612a9e565b6000604051808303816000865af19150503d8060008114611a3d576040519150601f19603f3d011682016040523d82523d6000602084013e611a42565b606091505b5091509150818015611a6c575080511580611a6c575080806020019051810190611a6c9190612aba565b611ab85760405162461bcd60e51b815260206004820152601f60248201527f7472616e7366657248656c7065723a207472616e73666572206661696c65640060448201526064016104da565b5050505050565b600080611b0f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008b8b8b611d66565b90506000611b1d8a8a611e2c565b509050806001600160a01b03168a6001600160a01b031603611bc157604051633851850760e21b81526001600160a01b03888116600483015260248201889052604482018790526064820186905283169063e146141c906084016020604051808303816000875af1158015611b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bba9190612a85565b9250611c45565b60405163186b30c760e11b81526001600160a01b0388811660048301526024820188905260448201879052606482018690528316906330d6618e906084016020604051808303816000875af1158015611c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c429190612a85565b92505b5050979650505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691611cae9190612a9e565b6000604051808303816000865af19150503d8060008114611ceb576040519150601f19603f3d011682016040523d82523d6000602084013e611cf0565b606091505b5091509150818015611d1a575080511580611d1a575080806020019051810190611d1a9190612aba565b611ab85760405162461bcd60e51b815260206004820152601e60248201527f7472616e7366657248656c7065723a20617070726f7665206661696c6564000060448201526064016104da565b6000806000611d758686611e2c565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015260488101879052919350915088906068016040516020818303038152906040528051906020012088604051602001611e08939291906001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b60408051601f19818403018152919052805160209091012098975050505050505050565b600080826001600160a01b0316846001600160a01b031603611e865760405162461bcd60e51b81526020600482015260136024820152726964656e746963616c2061646472657373657360681b60448201526064016104da565b826001600160a01b0316846001600160a01b031610611ea6578284611ea9565b83835b90925090506001600160a01b038216611ef35760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b60448201526064016104da565b9250929050565b604080516000808252602082019092526001600160a01b038416908390604051611f249190612a9e565b60006040518083038185875af1925050503d8060008114611f61576040519150601f19603f3d011682016040523d82523d6000602084013e611f66565b606091505b50509050806112c75760405162461bcd60e51b815260206004820152602360248201527f7472616e7366657248656c7065723a20455448207472616e73666572206661696044820152621b195960ea1b60648201526084016104da565b60008083601f840112611fd557600080fd5b5081356001600160401b03811115611fec57600080fd5b6020830191508360208260051b8501011115611ef357600080fd5b6001600160a01b038116811461201c57600080fd5b50565b6000806000806000806080878903121561203857600080fd5b86356001600160401b038082111561204f57600080fd5b61205b8a838b01611fc3565b9098509650602089013591508082111561207457600080fd5b5061208189828a01611fc3565b909550935050604087013561209581612007565b80925050606087013590509295509295509295565b600080600080600060a086880312156120c257600080fd5b85356120cd81612007565b94506020860135935060408601356120e481612007565b94979396509394606081013594506080013592915050565b6000806040838503121561210f57600080fd5b823561211a81612007565b946020939093013593505050565b600080600080600080600060a0888a03121561214357600080fd5b87356001600160401b038082111561215a57600080fd5b6121668b838c01611fc3565b909950975060208a013591508082111561217f57600080fd5b5061218c8a828b01611fc3565b90965094505060408801356121a081612007565b969995985093969295946060840135945060809093013592915050565b6000806000606084860312156121d257600080fd5b83356121dd81612007565b92506020840135915060408401356121f481612007565b809150509250925092565b6000806000806000806060878903121561221857600080fd5b86356001600160401b038082111561222f57600080fd5b61223b8a838b01611fc3565b9098509650602089013591508082111561225457600080fd5b6122608a838b01611fc3565b9096509450604089013591508082111561227957600080fd5b5061228689828a01611fc3565b979a9699509497509295939492505050565b600081518084526020808501945080840160005b838110156122c8578151875295820195908201906001016122ac565b509495945050505050565b6040815260006122e66040830185612298565b82810360208401526107678185612298565b60008060008060008060c0878903121561231157600080fd5b863561231c81612007565b9550602087013561232c81612007565b945060408701359350606087013561234381612007565b9598949750929560808101359460a0909101359350915050565b6000806020838503121561237057600080fd5b82356001600160401b0381111561238657600080fd5b61239285828601611fc3565b90969095509350505050565b60005b838110156123b95781810151838201526020016123a1565b50506000910152565b600081518084526123da81602086016020860161239e565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561244357603f198886030184526124318583516123c2565b94509285019290850190600101612415565b5092979650505050505050565b60008060006060848603121561246557600080fd5b833561247081612007565b9250602084013561248081612007565b929592945050506040919091013590565b801515811461201c57600080fd5b6000806000606084860312156124b457600080fd5b83356124bf81612007565b925060208401356124cf81612007565b915060408401356121f481612491565b600080600080600080600060e0888a0312156124fa57600080fd5b873561250581612007565b9650602088013561251581612007565b955060408801359450606088013561252c81612007565b9699959850939660808101359560a0820135955060c0909101359350915050565b60006020828403121561255f57600080fd5b813561256a81612007565b9392505050565b60008060008060008060c0878903121561258a57600080fd5b863561259581612007565b95506020870135945060408701359350606087013560ff8116811461234357600080fd5b6000806000806000608086880312156125d157600080fd5b85356125dc81612007565b945060208601356125ec81612491565b93506040860135925060608601356001600160401b038082111561260f57600080fd5b818801915088601f83011261262357600080fd5b81358181111561263257600080fd5b89602082850101111561264457600080fd5b9699959850939650602001949392505050565b6000806000806080858703121561266d57600080fd5b843561267881612007565b935060208501359250604085013561268f81612007565b9396929550929360600135925050565b6020808252601a908201527f696e76616c696420696e707574206172726179206c656e677468000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600080604083850312156126ff57600080fd5b505080516020909101519092909150565b80516001600160401b038116811461199f57600080fd5b6000806040838503121561273a57600080fd5b61274383612710565b915061275160208401612710565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b818103818111156108b5576108b561275a565b600181815b808511156127be5781600019048211156127a4576127a461275a565b808516156127b157918102915b93841c9390800290612788565b509250929050565b6000826127d5575060016108b5565b816127e2575060006108b5565b81600181146127f857600281146128025761281e565b60019150506108b5565b60ff8411156128135761281361275a565b50506001821b6108b5565b5060208310610133831016604e8410600b8410161715612841575081810a6108b5565b61284b8383612783565b806000190482111561285f5761285f61275a565b029392505050565b600061256a60ff8416836127c6565b80820281158282048414176108b5576108b561275a565b6000826128aa57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156128d757600080fd5b815161256a81612007565b6000808335601e198436030181126128f957600080fd5b8301803591506001600160401b0382111561291357600080fd5b602001915036819003821315611ef357600080fd5b8183823760009101908152919050565b60006020828403121561294a57600080fd5b81516001600160401b038082111561296157600080fd5b818401915084601f83011261297557600080fd5b815181811115612987576129876128af565b604051601f8201601f19908116603f011681019083821181831017156129af576129af6128af565b816040528281528760208487010111156129c857600080fd5b610ea183602083016020880161239e565b60208152600061256a60208301846123c2565b6000600182016129fe576129fe61275a565b5060010190565b6020808252600990820152683337b93134b23232b760b91b604082015260600190565b6001600160a01b0387811682528616602082015284151560408201526060810184905260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b600060208284031215612a9757600080fd5b5051919050565b60008251612ab081846020870161239e565b9190910192915050565b600060208284031215612acc57600080fd5b815161256a8161249156fea2646970667358221220bc9fbc7529b001d6cf12633ef963eca714396a792bdf0eb9a6e6f89a4c4b577c64736f6c63430008110033",
    "sourceMap": "666:16504:24:-:0;;;997:328;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1076:20:24;;1068:53;;;;-1:-1:-1;;;1068:53:24;;781:2:35;1068:53:24;;;763:21:35;820:2;800:18;;;793:30;859:22;839:18;;;832:50;899:18;;1068:53:24;;;;;;;;;-1:-1:-1;;;;;1139:19:24;;1131:44;;;;-1:-1:-1;;;1131:44:24;;1130:2:35;1131:44:24;;;1112:21:35;1169:2;1149:18;;;1142:30;-1:-1:-1;;;1188:18:35;;;1181:42;1240:18;;1131:44:24;928:336:35;1131:44:24;-1:-1:-1;;;;;1185:12:24;;;;;1207:5;:14;;-1:-1:-1;;;;;;1207:14:24;;;;;;;1231:24;;;;;;1277:41;;;-1:-1:-1;;;1277:41:24;;;;:39;;:41;;;;;;;;;;;;;;;1231:24;1277:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1265:53;;-1:-1:-1;666:16504:24;;-1:-1:-1;;666:16504:24;14:177:35;93:13;;-1:-1:-1;;;;;135:31:35;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:378::-;284:6;292;300;353:2;341:9;332:7;328:23;324:32;321:52;;;369:1;366;359:12;321:52;392:40;422:9;392:40;:::i;:::-;382:50;;451:49;496:2;485:9;481:18;451:49;:::i;:::-;441:59;;519:49;564:2;553:9;549:18;519:49;:::i;:::-;509:59;;196:378;;;;;:::o;1269:184::-;1339:6;1392:2;1380:9;1371:7;1367:23;1363:32;1360:52;;;1408:1;1405;1398:12;1360:52;-1:-1:-1;1431:16:35;;1269:184;-1:-1:-1;1269:184:35:o;:::-;666:16504:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052600436106101395760003560e01c80638865305b116100ab578063c58b6a101161006f578063c58b6a10146103f7578063d29f140914610417578063f2fde38b14610437578063f3995c6714610457578063f5eacc2f14610477578063fecc1b9f1461049757600080fd5b80638865305b146103435780638da5cb5b14610356578063ac9650d814610376578063ad5c4648146103a3578063b2118a8d146103d757600080fd5b8063687a0b10116100fd578063687a0b101461026057806369328dec146102805780636d3a957c146102b55780636d48058e146102e35780637129b6401461030357806380500d201461032357600080fd5b806301c838fe1461017a5780630cd19cbe146101a05780630dff1165146101c057806312713bd2146101f4578063429d9b1d1461021457600080fd5b3661017557336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461017357600080fd5b005b600080fd5b61018d61018836600461201f565b6104aa565b6040519081526020015b60405180910390f35b3480156101ac57600080fd5b5061018d6101bb3660046120aa565b610716565b3480156101cc57600080fd5b5061018d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561020057600080fd5b5061018d61020f3660046120fc565b610770565b34801561022057600080fd5b506102487f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610197565b34801561026c57600080fd5b5061018d61027b366004612128565b6108bb565b34801561028c57600080fd5b506102a061029b3660046121bd565b610ae2565b60408051928352602083019190915201610197565b3480156102c157600080fd5b506102d56102d03660046121ff565b610b6b565b6040516101979291906122d3565b3480156102ef57600080fd5b5061018d6102fe366004612128565b610d7e565b34801561030f57600080fd5b5061018d61031e3660046122f8565b610e7c565b34801561032f57600080fd5b506102a061033e3660046121bd565b610eac565b61018d6103513660046120aa565b611083565b34801561036257600080fd5b50600054610248906001600160a01b031681565b34801561038257600080fd5b5061039661039136600461235d565b611132565b60405161019791906123ee565b3480156103af57600080fd5b506102487f000000000000000000000000000000000000000000000000000000000000000081565b3480156103e357600080fd5b506101736103f2366004612450565b611289565b34801561040357600080fd5b5061017361041236600461249f565b6112cc565b34801561042357600080fd5b5061018d6104323660046124df565b61131b565b34801561044357600080fd5b5061017361045236600461254d565b61134d565b34801561046357600080fd5b50610173610472366004612571565b611418565b34801561048357600080fd5b506101736104923660046125b9565b6114a4565b61018d6104a5366004612657565b611513565b60008380158015906104be57506001810187145b6104e35760405162461bcd60e51b81526004016104da9061269f565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031688886000818110610520576105206126d6565b9050602002016020810190610535919061254d565b6001600160a01b03161461058b5760405162461bcd60e51b815260206004820152601860248201527f666972737420746f6b656e206d7573742062652057455448000000000000000060448201526064016104da565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156105e657600080fd5b505af11580156105fa573d6000803e3d6000fd5b503493506001925050505b82811015610690576106868a8a60018403818110610625576106256126d6565b905060200201602081019061063a919061254d565b8b8b8481811061064c5761064c6126d6565b9050602002016020810190610661919061254d565b8a8a60018603818110610676576106766126d6565b90506020020135308660006115b3565b9150600101610605565b6107088a8a600184038181106106a8576106a86126d6565b90506020020160208101906106bd919061254d565b8b8b848181106106cf576106cf6126d6565b90506020020160208101906106e4919061254d565b8a8a600186038181106106f9576106f96126d6565b9050602002013589868a6115b3565b9a9950505050505050505050565b600061072d6001600160a01b038716333086611737565b61075b867f0000000000000000000000000000000000000000000000000000000000000000873087876115b3565b90506107678482611867565b95945050505050565b6000806000846001600160a01b0316630902f1ac6040518163ffffffff1660e01b81526004016040805180830381865afa1580156107b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d691906126ec565b91509150600080866001600160a01b03166359362b886040518163ffffffff1660e01b81526004016040805180830381865afa15801561081a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083e9190612727565b9092509050838361089a61085f6001600160401b038516600160401b612770565b6108766001600160401b038716600160401b612770565b61088160028c612867565b61088b9190612876565b610895919061288d565b6118f9565b6108a49190612876565b6108ae919061288d565b9450505050505b92915050565b60008480158015906108cf57506001810188145b6108eb5760405162461bcd60e51b81526004016104da9061269f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316898983818110610927576109276126d6565b905060200201602081019061093c919061254d565b6001600160a01b0316146109925760405162461bcd60e51b815260206004820152601760248201527f6c61737420746f6b656e206d757374206265205745544800000000000000000060448201526064016104da565b6109d13330868c8c60008181106109ab576109ab6126d6565b90506020020160208101906109c0919061254d565b6001600160a01b0316929190611737565b8360015b82811015610a5057610a468b8b600184038181106109f5576109f56126d6565b9050602002016020810190610a0a919061254d565b8c8c84818110610a1c57610a1c6126d6565b9050602002016020810190610a31919061254d565b8b8b60018603818110610676576106766126d6565b91506001016109d5565b610ac88b8b60018403818110610a6857610a686126d6565b9050602002016020810190610a7d919061254d565b8c8c84818110610a8f57610a8f6126d6565b9050602002016020810190610aa4919061254d565b8b8b60018603818110610ab957610ab96126d6565b9050602002013530868a6115b3565b9350610ad48785611867565b505050979650505050505050565b60405163e162402f60e01b8152336004820152602481018390526001600160a01b038281166044830152600091829186169063e162402f9060640160408051808303816000875af1158015610b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5f91906126ec565b91509150935093915050565b606080868581148015610b7d57508084145b610b995760405162461bcd60e51b81526004016104da9061269f565b6000816001600160401b03811115610bb357610bb36128af565b604051908082528060200260200182016040528015610bdc578160200160208202803683370190505b5090506000826001600160401b03811115610bf957610bf96128af565b604051908082528060200260200182016040528015610c22578160200160208202803683370190505b50905060005b83811015610d6d576000808d8d84818110610c4557610c456126d6565b9050602002016020810190610c5a919061254d565b6001600160a01b031663e162402f338e8e87818110610c7b57610c7b6126d6565b905060200201358d8d88818110610c9457610c946126d6565b9050602002016020810190610ca9919061254d565b60405160e085901b6001600160e01b03191681526001600160a01b0393841660048201526024810192909252909116604482015260640160408051808303816000875af1158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2291906126ec565b9150915081858481518110610d3957610d396126d6565b60200260200101818152505080848481518110610d5857610d586126d6565b60209081029190910101525050600101610c28565b50909a909950975050505050505050565b6000848015801590610d9257506001810188145b610dae5760405162461bcd60e51b81526004016104da9061269f565b610dc73330868c8c60008181106109ab576109ab6126d6565b8360015b82811015610df557610deb8b8b600184038181106109f5576109f56126d6565b9150600101610dcb565b610e6d8b8b60018403818110610e0d57610e0d6126d6565b9050602002016020810190610e22919061254d565b8c8c84818110610e3457610e346126d6565b9050602002016020810190610e49919061254d565b8b8b60018603818110610e5e57610e5e6126d6565b905060200201358a868a6115b3565b9b9a5050505050505050505050565b6000610e936001600160a01b038816333086611737565b610ea18787878787876115b3565b979650505050505050565b60405163e162402f60e01b81523360048201526024810183905230604482015260009081906001600160a01b0386169063e162402f9060640160408051808303816000875af1158015610f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2791906126ec565b80925081935050506000856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9391906128c5565b9050600080841161100557866001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fdc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100091906128c5565b611007565b815b90506000808511611018578361101a565b845b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316036110645761105f8682611867565b611078565b6110786001600160a01b03831687836119a4565b505050935093915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156110e057600080fd5b505af11580156110f4573d6000803e3d6000fd5b50505050506111287f0000000000000000000000000000000000000000000000000000000000000000878787348888611abf565b9695505050505050565b606081806001600160401b0381111561114d5761114d6128af565b60405190808252806020026020018201604052801561118057816020015b606081526020019060019003908161116b5790505b50915060005b8181101561128157600080308787858181106111a4576111a46126d6565b90506020028101906111b691906128e2565b6040516111c4929190612928565b600060405180830381855af49150503d80600081146111ff576040519150601f19603f3d011682016040523d82523d6000602084013e611204565b606091505b5091509150816112505760448151101561121d57600080fd5b600481019050808060200190518101906112379190612938565b60405162461bcd60e51b81526004016104da91906129d9565b80858481518110611263576112636126d6565b602002602001018190525050508061127a906129ec565b9050611186565b505092915050565b6000546001600160a01b031633146112b35760405162461bcd60e51b81526004016104da90612a05565b6112c76001600160a01b03841683836119a4565b505050565b6000546001600160a01b031633146112f65760405162461bcd60e51b81526004016104da90612a05565b6112c7828261130657600061130a565b6000195b6001600160a01b0386169190611c52565b60006113326001600160a01b038916333087611737565b61134188888888888888611abf565b98975050505050505050565b6000546001600160a01b031633146113775760405162461bcd60e51b81526004016104da90612a05565b6001600160a01b0381166113c45760405162461bcd60e51b81526020600482015260146024820152736f776e65722063616e6e6f74206265207a65726f60601b60448201526064016104da565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527fcfaaa26691e16e66e73290fc725eee1a6b4e0e693a1640484937aac25ffb55a49060200160405180910390a150565b60405163d505accf60e01b8152336004820152306024820152604481018690526064810185905260ff8416608482015260a4810183905260c481018290526001600160a01b0387169063d505accf9060e401600060405180830381600087803b15801561148457600080fd5b505af1158015611498573d6000803e3d6000fd5b50505050505050505050565b604051631edfa7eb60e21b81526001600160a01b03861690637b7e9fac906114da90339030908990899089908990600401612a28565b600060405180830381600087803b1580156114f457600080fd5b505af1158015611508573d6000803e3d6000fd5b505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561157057600080fd5b505af1158015611584573d6000803e3d6000fd5b50505050506107677f000000000000000000000000000000000000000000000000000000000000000086868634875b6000806116037f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008a8a8a611d66565b905060006116118989611e2c565b509050806001600160a01b0316896001600160a01b0316036116ae5760405163a9d9db4d60e01b81526001600160a01b038781166004830152602482018790526044820186905283169063a9d9db4d906064016020604051808303816000875af1158015611683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a79190612a85565b925061172b565b6040516353d56bf560e01b81526001600160a01b03878116600483015260248201879052604482018690528316906353d56bf5906064016020604051808303816000875af1158015611704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117289190612a85565b92505b50509695505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b179052915160009283929088169161179b9190612a9e565b6000604051808303816000865af19150503d80600081146117d8576040519150601f19603f3d011682016040523d82523d6000602084013e6117dd565b606091505b50915091508180156118075750805115806118075750808060200190518101906118079190612aba565b61185f5760405162461bcd60e51b815260206004820152602360248201527f7472616e7366657248656c7065723a207472616e7366657246726f6d206661696044820152621b195960ea1b60648201526084016104da565b505050505050565b604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156118c957600080fd5b505af11580156118dd573d6000803e3d6000fd5b506118f5925050506001600160a01b03831682611efa565b5050565b60b581600160881b81106119125760409190911b9060801c5b6901000000000000000000811061192e5760209190911b9060401c5b6501000000000081106119465760109190911b9060201c5b6301000000811061195c5760089190911b9060101c5b62010000010260121c80820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c80820481111561199f5781045b919050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691611a009190612a9e565b6000604051808303816000865af19150503d8060008114611a3d576040519150601f19603f3d011682016040523d82523d6000602084013e611a42565b606091505b5091509150818015611a6c575080511580611a6c575080806020019051810190611a6c9190612aba565b611ab85760405162461bcd60e51b815260206004820152601f60248201527f7472616e7366657248656c7065723a207472616e73666572206661696c65640060448201526064016104da565b5050505050565b600080611b0f7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008b8b8b611d66565b90506000611b1d8a8a611e2c565b509050806001600160a01b03168a6001600160a01b031603611bc157604051633851850760e21b81526001600160a01b03888116600483015260248201889052604482018790526064820186905283169063e146141c906084016020604051808303816000875af1158015611b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bba9190612a85565b9250611c45565b60405163186b30c760e11b81526001600160a01b0388811660048301526024820188905260448201879052606482018690528316906330d6618e906084016020604051808303816000875af1158015611c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c429190612a85565b92505b5050979650505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1790529151600092839290871691611cae9190612a9e565b6000604051808303816000865af19150503d8060008114611ceb576040519150601f19603f3d011682016040523d82523d6000602084013e611cf0565b606091505b5091509150818015611d1a575080511580611d1a575080806020019051810190611d1a9190612aba565b611ab85760405162461bcd60e51b815260206004820152601e60248201527f7472616e7366657248656c7065723a20617070726f7665206661696c6564000060448201526064016104da565b6000806000611d758686611e2c565b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b16603482015260488101879052919350915088906068016040516020818303038152906040528051906020012088604051602001611e08939291906001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b60408051601f19818403018152919052805160209091012098975050505050505050565b600080826001600160a01b0316846001600160a01b031603611e865760405162461bcd60e51b81526020600482015260136024820152726964656e746963616c2061646472657373657360681b60448201526064016104da565b826001600160a01b0316846001600160a01b031610611ea6578284611ea9565b83835b90925090506001600160a01b038216611ef35760405162461bcd60e51b815260206004820152600c60248201526b7a65726f206164647265737360a01b60448201526064016104da565b9250929050565b604080516000808252602082019092526001600160a01b038416908390604051611f249190612a9e565b60006040518083038185875af1925050503d8060008114611f61576040519150601f19603f3d011682016040523d82523d6000602084013e611f66565b606091505b50509050806112c75760405162461bcd60e51b815260206004820152602360248201527f7472616e7366657248656c7065723a20455448207472616e73666572206661696044820152621b195960ea1b60648201526084016104da565b60008083601f840112611fd557600080fd5b5081356001600160401b03811115611fec57600080fd5b6020830191508360208260051b8501011115611ef357600080fd5b6001600160a01b038116811461201c57600080fd5b50565b6000806000806000806080878903121561203857600080fd5b86356001600160401b038082111561204f57600080fd5b61205b8a838b01611fc3565b9098509650602089013591508082111561207457600080fd5b5061208189828a01611fc3565b909550935050604087013561209581612007565b80925050606087013590509295509295509295565b600080600080600060a086880312156120c257600080fd5b85356120cd81612007565b94506020860135935060408601356120e481612007565b94979396509394606081013594506080013592915050565b6000806040838503121561210f57600080fd5b823561211a81612007565b946020939093013593505050565b600080600080600080600060a0888a03121561214357600080fd5b87356001600160401b038082111561215a57600080fd5b6121668b838c01611fc3565b909950975060208a013591508082111561217f57600080fd5b5061218c8a828b01611fc3565b90965094505060408801356121a081612007565b969995985093969295946060840135945060809093013592915050565b6000806000606084860312156121d257600080fd5b83356121dd81612007565b92506020840135915060408401356121f481612007565b809150509250925092565b6000806000806000806060878903121561221857600080fd5b86356001600160401b038082111561222f57600080fd5b61223b8a838b01611fc3565b9098509650602089013591508082111561225457600080fd5b6122608a838b01611fc3565b9096509450604089013591508082111561227957600080fd5b5061228689828a01611fc3565b979a9699509497509295939492505050565b600081518084526020808501945080840160005b838110156122c8578151875295820195908201906001016122ac565b509495945050505050565b6040815260006122e66040830185612298565b82810360208401526107678185612298565b60008060008060008060c0878903121561231157600080fd5b863561231c81612007565b9550602087013561232c81612007565b945060408701359350606087013561234381612007565b9598949750929560808101359460a0909101359350915050565b6000806020838503121561237057600080fd5b82356001600160401b0381111561238657600080fd5b61239285828601611fc3565b90969095509350505050565b60005b838110156123b95781810151838201526020016123a1565b50506000910152565b600081518084526123da81602086016020860161239e565b601f01601f19169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561244357603f198886030184526124318583516123c2565b94509285019290850190600101612415565b5092979650505050505050565b60008060006060848603121561246557600080fd5b833561247081612007565b9250602084013561248081612007565b929592945050506040919091013590565b801515811461201c57600080fd5b6000806000606084860312156124b457600080fd5b83356124bf81612007565b925060208401356124cf81612007565b915060408401356121f481612491565b600080600080600080600060e0888a0312156124fa57600080fd5b873561250581612007565b9650602088013561251581612007565b955060408801359450606088013561252c81612007565b9699959850939660808101359560a0820135955060c0909101359350915050565b60006020828403121561255f57600080fd5b813561256a81612007565b9392505050565b60008060008060008060c0878903121561258a57600080fd5b863561259581612007565b95506020870135945060408701359350606087013560ff8116811461234357600080fd5b6000806000806000608086880312156125d157600080fd5b85356125dc81612007565b945060208601356125ec81612491565b93506040860135925060608601356001600160401b038082111561260f57600080fd5b818801915088601f83011261262357600080fd5b81358181111561263257600080fd5b89602082850101111561264457600080fd5b9699959850939650602001949392505050565b6000806000806080858703121561266d57600080fd5b843561267881612007565b935060208501359250604085013561268f81612007565b9396929550929360600135925050565b6020808252601a908201527f696e76616c696420696e707574206172726179206c656e677468000000000000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600080604083850312156126ff57600080fd5b505080516020909101519092909150565b80516001600160401b038116811461199f57600080fd5b6000806040838503121561273a57600080fd5b61274383612710565b915061275160208401612710565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b818103818111156108b5576108b561275a565b600181815b808511156127be5781600019048211156127a4576127a461275a565b808516156127b157918102915b93841c9390800290612788565b509250929050565b6000826127d5575060016108b5565b816127e2575060006108b5565b81600181146127f857600281146128025761281e565b60019150506108b5565b60ff8411156128135761281361275a565b50506001821b6108b5565b5060208310610133831016604e8410600b8410161715612841575081810a6108b5565b61284b8383612783565b806000190482111561285f5761285f61275a565b029392505050565b600061256a60ff8416836127c6565b80820281158282048414176108b5576108b561275a565b6000826128aa57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156128d757600080fd5b815161256a81612007565b6000808335601e198436030181126128f957600080fd5b8301803591506001600160401b0382111561291357600080fd5b602001915036819003821315611ef357600080fd5b8183823760009101908152919050565b60006020828403121561294a57600080fd5b81516001600160401b038082111561296157600080fd5b818401915084601f83011261297557600080fd5b815181811115612987576129876128af565b604051601f8201601f19908116603f011681019083821181831017156129af576129af6128af565b816040528281528760208487010111156129c857600080fd5b610ea183602083016020880161239e565b60208152600061256a60208301846123c2565b6000600182016129fe576129fe61275a565b5060010190565b6020808252600990820152683337b93134b23232b760b91b604082015260600190565b6001600160a01b0387811682528616602082015284151560408201526060810184905260a06080820181905281018290526000828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b600060208284031215612a9757600080fd5b5051919050565b60008251612ab081846020870161239e565b9190910192915050565b600060208284031215612acc57600080fd5b815161256a8161249156fea2646970667358221220bc9fbc7529b001d6cf12633ef963eca714396a792bdf0eb9a6e6f89a4c4b577c64736f6c63430008110033",
    "sourceMap": "666:16504:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3550:10;-1:-1:-1;;;;;3564:4:24;3550:18;;3542:27;;;;;;666:16504;;;;;7500:753;;;;;;:::i;:::-;;:::i;:::-;;;1650:25:35;;;1638:2;1623:18;7500:753:24;;;;;;;;5751:312;;;;;;;;;;-1:-1:-1;5751:312:24;;;;;:::i;:::-;;:::i;881:34::-;;;;;;;;;;;;;;;16826:341;;;;;;;;;;-1:-1:-1;16826:341:24;;;;;:::i;:::-;;:::i;837:38::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2951:32:35;;;2933:51;;2921:2;2906:18;837:38:24;2787:203:35;8656:835:24;;;;;;;;;;-1:-1:-1;8656:835:24;;;;;:::i;:::-;;:::i;11727:177::-;;;;;;;;;;-1:-1:-1;11727:177:24;;;;;:::i;:::-;;:::i;:::-;;;;4681:25:35;;;4737:2;4722:18;;4715:34;;;;4654:18;11727:177:24;4507:248:35;12379:851:24;;;;;;;;;;-1:-1:-1;12379:851:24;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;6439:705::-;;;;;;;;;;-1:-1:-1;6439:705:24;;;;;:::i;:::-;;:::i;4588:279::-;;;;;;;;;;-1:-1:-1;4588:279:24;;;;;:::i;:::-;;:::i;13720:514::-;;;;;;;;;;-1:-1:-1;13720:514:24;;;;;:::i;:::-;;:::i;11153:264::-;;;;;;:::i;:::-;;:::i;922:20::-;;;;;;;;;;-1:-1:-1;922:20:24;;;;-1:-1:-1;;;;;922:20:24;;;15829:593;;;;;;;;;;-1:-1:-1;15829:593:24;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;802:29::-;;;;;;;;;;;;;;;3235:144;;;;;;;;;;-1:-1:-1;3235:144:24;;;;;:::i;:::-;;:::i;2834:180::-;;;;;;;;;;-1:-1:-1;2834:180:24;;;;;:::i;:::-;;:::i;10465:302::-;;;;;;;;;;-1:-1:-1;10465:302:24;;;;;:::i;:::-;;:::i;2377:197::-;;;;;;;;;;-1:-1:-1;2377:197:24;;;;;:::i;:::-;;:::i;14886:256::-;;;;;;;;;;-1:-1:-1;14886:256:24;;;;;:::i;:::-;;:::i;15480:204::-;;;;;;;;;;-1:-1:-1;15480:204:24;;;;;:::i;:::-;;:::i;5173:243::-;;;;;;:::i;:::-;;:::i;7500:753::-;7638:11;7702:7;7734:17;;;;;:55;;-1:-1:-1;7788:1:24;7772:17;;7755:34;;7734:55;7726:94;;;;-1:-1:-1;;;7726:94:24;;;;;;;:::i;:::-;;;;;;;;;7851:4;-1:-1:-1;;;;;7838:17:24;:6;;7845:1;7838:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;7838:17:24;;7830:54;;;;-1:-1:-1;;;7830:54:24;;14312:2:35;7830:54:24;;;14294:21:35;14351:2;14331:18;;;14324:30;14390:26;14370:18;;;14363:54;14434:18;;7830:54:24;14110:348:35;7830:54:24;7900:4;-1:-1:-1;;;;;7894:19:24;;7921:9;7894:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7966:9:24;;-1:-1:-1;7994:1:24;;-1:-1:-1;;;8005:137:24;8014:13;8010:1;:17;8005:137;;;8064:78;8070:6;;8079:1;8077;:3;8070:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;8083:6;;8090:1;8083:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;8094:7;;8104:1;8102;:3;8094:12;;;;;;;:::i;:::-;;;;;;;8116:4;8123:15;8140:1;8064:5;:78::i;:::-;8046:96;-1:-1:-1;8029:3:24;;8005:137;;;8161:75;8167:6;;8176:1;8174;:3;8167:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;8180:6;;8187:1;8180:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;8191:7;;8201:1;8199;:3;8191:12;;;;;;;:::i;:::-;;;;;;;8205:2;8209:15;8226:9;8161:5;:75::i;:::-;8152:84;7500:753;-1:-1:-1;;;;;;;;;;7500:753:24:o;5751:312::-;5858:11;5881:58;-1:-1:-1;;;;;5881:24:24;;5906:10;5926:4;5933:5;5881:24;:58::i;:::-;5958:60;5964:7;5973:4;5979:5;5994:4;6001:5;6008:9;5958:5;:60::i;:::-;5949:69;;6028:28;6045:2;6049:6;6028:16;:28::i;:::-;5751:312;;;;;;;:::o;16826:341::-;16898:14;16925:13;16940;16963:4;-1:-1:-1;;;;;16957:23:24;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;16924:58;;;;16993:12;17007;17029:4;-1:-1:-1;;;;;17023:23:24;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;16992:56;;-1:-1:-1;16992:56:24;-1:-1:-1;17152:8:24;17141;17065:73;17108:21;-1:-1:-1;;;;;17108:21:24;;-1:-1:-1;;;17108:21:24;:::i;:::-;17082;-1:-1:-1;;;;;17082:21:24;;-1:-1:-1;;;17082:21:24;:::i;:::-;17066:12;17077:1;17066:9;:12;:::i;:::-;:38;;;;:::i;:::-;:64;;;;:::i;:::-;17065:71;:73::i;:::-;:84;;;;:::i;:::-;:95;;;;:::i;:::-;17058:102;;;;;;16826:341;;;;;:::o;8656:835::-;8799:11;8863:7;8895:17;;;;;:55;;-1:-1:-1;8949:1:24;8933:17;;8916:34;;8895:55;8887:94;;;;-1:-1:-1;;;8887:94:24;;;;;;;:::i;:::-;9024:4;-1:-1:-1;;;;;8999:29:24;:6;;9006:13;8999:21;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;8999:29:24;;8991:65;;;;-1:-1:-1;;;8991:65:24;;17432:2:35;8991:65:24;;;17414:21:35;17471:2;17451:18;;;17444:30;17510:25;17490:18;;;17483:53;17553:18;;8991:65:24;17230:347:35;8991:65:24;9066:60;9093:10;9113:4;9120:5;9066:6;;9073:1;9066:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;9066:26:24;;:60;;:26;:60::i;:::-;9159:5;9183:1;9194:137;9203:13;9199:1;:17;9194:137;;;9253:78;9259:6;;9268:1;9266;:3;9259:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;9272:6;;9279:1;9272:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;9283:7;;9293:1;9291;:3;9283:12;;;;;;;:::i;9253:78::-;9235:96;-1:-1:-1;9218:3:24;;9194:137;;;9350:86;9356:6;;9365:1;9363;:3;9356:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;9369:6;;9376:1;9369:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;9380:7;;9390:1;9388;:3;9380:12;;;;;;;:::i;:::-;;;;;;;9402:4;9409:15;9426:9;9350:5;:86::i;:::-;9341:95;;9446:28;9463:2;9467:6;9446:16;:28::i;:::-;8822:663;;;8656:835;;;;;;;;;:::o;11727:177::-;11850:47;;-1:-1:-1;;;11850:47:24;;11875:10;11850:47;;;17822:34:35;17872:18;;;17865:34;;;-1:-1:-1;;;;;17935:15:35;;;17915:18;;;17908:43;11801:14:24;;;;11850:24;;;;;17757:18:35;;11850:47:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11843:54;;;;11727:177;;;;;;:::o;12379:851::-;12504:27;;12590:5;12620:28;;;:56;;;;-1:-1:-1;12652:24:24;;;12620:56;12612:95;;;;-1:-1:-1;;;12612:95:24;;;;;;;:::i;:::-;12717:28;12759:10;-1:-1:-1;;;;;12748:22:24;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12748:22:24;;12717:53;;12780:28;12822:10;-1:-1:-1;;;;;12811:22:24;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12811:22:24;;12780:53;;12872:6;12867:272;12888:10;12884:1;:14;12867:272;;;12924:17;12943;12970:5;;12976:1;12970:8;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;12964:28:24;;12993:10;13005:7;;13013:1;13005:10;;;;;;;:::i;:::-;;;;;;;13017:3;;13021:1;13017:6;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;12964:60;;;;;;-1:-1:-1;;;;;;12964:60:24;;;-1:-1:-1;;;;;17840:15:35;;;12964:60:24;;;17822:34:35;17872:18;;;17865:34;;;;17935:15;;;17915:18;;;17908:43;17757:18;;12964:60:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12923:101;;;;13062:12;13042:14;13057:1;13042:17;;;;;;;;:::i;:::-;;;;;;:32;;;;;13112:12;13092:14;13107:1;13092:17;;;;;;;;:::i;:::-;;;;;;;;;;:32;-1:-1:-1;;12900:3:24;;12867:272;;;-1:-1:-1;13192:14:24;;13208;;-1:-1:-1;12379:851:24;-1:-1:-1;;;;;;;;12379:851:24:o;6439:705::-;6576:11;6640:7;6672:17;;;;;:55;;-1:-1:-1;6726:1:24;6710:17;;6693:34;;6672:55;6664:94;;;;-1:-1:-1;;;6664:94:24;;;;;;;:::i;:::-;6768:60;6795:10;6815:4;6822:5;6768:6;;6775:1;6768:9;;;;;;;:::i;:60::-;6861:5;6885:1;6896:137;6905:13;6901:1;:17;6896:137;;;6955:78;6961:6;;6970:1;6968;:3;6961:11;;;;;;;:::i;6955:78::-;6937:96;-1:-1:-1;6920:3:24;;6896:137;;;7052:75;7058:6;;7067:1;7065;:3;7058:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;7071:6;;7078:1;7071:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;7082:7;;7092:1;7090;:3;7082:12;;;;;;;:::i;:::-;;;;;;;7096:2;7100:15;7117:9;7052:5;:75::i;:::-;7043:84;6439:705;-1:-1:-1;;;;;;;;;;;6439:705:24:o;4588:279::-;4707:11;4730:58;-1:-1:-1;;;;;4730:24:24;;4755:10;4775:4;4782:5;4730:24;:58::i;:::-;4807:53;4813:7;4822:8;4832:5;4839:2;4843:5;4850:9;4807:5;:53::i;:::-;4798:62;4588:279;-1:-1:-1;;;;;;;4588:279:24:o;13720:514::-;13864:58;;-1:-1:-1;;;13864:58:24;;13889:10;13864:58;;;17822:34:35;17872:18;;;17865:34;;;13916:4:24;17915:18:35;;;17908:43;13797:14:24;;;;-1:-1:-1;;;;;13864:24:24;;;;;17757:18:35;;13864:58:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13839:83;;;;;;;;13932:14;13955:4;-1:-1:-1;;;;;13949:18:24;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13932:37;;13979:13;14007:1;13995:9;:13;:45;;14026:4;-1:-1:-1;;;;;14020:18:24;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13995:45;;;14011:6;13995:45;13979:61;;14050:11;14076:1;14064:9;:13;:37;;14092:9;14064:37;;;14080:9;14064:37;14050:51;;14124:4;-1:-1:-1;;;;;14115:13:24;:5;-1:-1:-1;;;;;14115:13:24;;14111:116;;14142:28;14159:2;14163:6;14142:16;:28::i;:::-;14111:116;;;14197:30;-1:-1:-1;;;;;14197:18:24;;14216:2;14220:6;14197:18;:30::i;:::-;13829:405;;;13720:514;;;;;;:::o;11153:264::-;11268:11;11297:4;-1:-1:-1;;;;;11291:19:24;;11318:9;11291:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11347:63;11356:4;11362:8;11372:5;11379:2;11383:9;11394;11405:4;11347:8;:63::i;:::-;11340:70;11153:264;-1:-1:-1;;;;;;11153:264:24:o;15829:593::-;15887:22;15939:4;;-1:-1:-1;;;;;15970:23:24;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15960:33;;16008:9;16003:413;16027:10;16023:1;:14;16003:413;;;16059:12;;16104:4;16123;;16128:1;16123:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;16096:35;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;16058:73;;;;16151:7;16146:226;;16198:2;16182:6;:13;:18;16178:32;;;16202:8;;;16178:32;16281:4;16273:6;16269:17;16259:27;;16339:6;16328:28;;;;;;;;;;;;:::i;:::-;16321:36;;-1:-1:-1;;;16321:36:24;;;;;;;;:::i;16146:226::-;16399:6;16386:7;16394:1;16386:10;;;;;;;;:::i;:::-;;;;;;:19;;;;16044:372;;16039:3;;;;:::i;:::-;;;16003:413;;;;15911:511;15829:593;;;;:::o;3235:144::-;1384:5;;-1:-1:-1;;;;;1384:5:24;1370:10;:19;1362:41;;;;-1:-1:-1;;;1362:41:24;;;;;;;:::i;:::-;3335:37:::1;-1:-1:-1::0;;;;;3335:25:24;::::1;3361:2:::0;3365:6;3335:25:::1;:37::i;:::-;3235:144:::0;;;:::o;2834:180::-;1384:5;;-1:-1:-1;;;;;1384:5:24;1370:10;:19;1362:41;;;;-1:-1:-1;;;1362:41:24;;;;;;;:::i;:::-;2937:70:::1;2962:15;2979:6;:27;;3005:1;2979:27;;;-1:-1:-1::0;;2979:27:24::1;-1:-1:-1::0;;;;;2937:24:24;::::1;::::0;:70;:24:::1;:70::i;10465:302::-:0;10598:11;10621:58;-1:-1:-1;;;;;10621:24:24;;10646:10;10666:4;10673:5;10621:24;:58::i;:::-;10698:62;10707:7;10716:8;10726:5;10733:2;10737:5;10744:9;10755:4;10698:8;:62::i;:::-;10689:71;10465:302;-1:-1:-1;;;;;;;;10465:302:24:o;2377:197::-;1384:5;;-1:-1:-1;;;;;1384:5:24;1370:10;:19;1362:41;;;;-1:-1:-1;;;1362:41:24;;;;;;;:::i;:::-;-1:-1:-1;;;;;2457:20:24;::::1;2449:53;;;::::0;-1:-1:-1;;;2449:53:24;;20957:2:35;2449:53:24::1;::::0;::::1;20939:21:35::0;20996:2;20976:18;;;20969:30;-1:-1:-1;;;21015:18:35;;;21008:50;21075:18;;2449:53:24::1;20755:344:35::0;2449:53:24::1;2512:5;:14:::0;;-1:-1:-1;;;;;;2512:14:24::1;-1:-1:-1::0;;;;;2512:14:24;::::1;::::0;;::::1;::::0;;;2542:25:::1;::::0;2933:51:35;;;2542:25:24::1;::::0;2921:2:35;2906:18;2542:25:24::1;;;;;;;2377:197:::0;:::o;14886:256::-;15056:79;;-1:-1:-1;;;15056:79:24;;15083:10;15056:79;;;21453:34:35;15103:4:24;21503:18:35;;;21496:43;21555:18;;;21548:34;;;21598:18;;;21591:34;;;21674:4;21662:17;;21641:19;;;21634:46;21696:19;;;21689:35;;;21740:19;;;21733:35;;;-1:-1:-1;;;;;15056:26:24;;;;;21387:19:35;;15056:79:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14886:256;;;;;;:::o;15480:204::-;15589:88;;-1:-1:-1;;;15589:88:24;;-1:-1:-1;;;;;15589:36:24;;;;;:88;;15626:10;;15646:4;;15653:8;;15663;;15673:3;;;;15589:88;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15480:204;;;;;:::o;5173:243::-;5276:11;5305:4;-1:-1:-1;;;;;5299:19:24;;5326:9;5299:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5355:54;5361:4;5367:8;5377:5;5384:2;5388:9;5399;3582:454;3702:11;3725:12;3740:59;3748:13;3763:9;3774:7;3783:8;3793:5;3740:7;:59::i;:::-;3725:74;;3810:14;3829:29;3840:7;3849:8;3829:10;:29::i;:::-;3809:49;;;3882:6;-1:-1:-1;;;;;3871:17:24;:7;-1:-1:-1;;;;;3871:17:24;;3868:161;;3911:41;;-1:-1:-1;;;3911:41:24;;-1:-1:-1;;;;;22748:32:35;;;3911:41:24;;;22730:51:35;22797:18;;;22790:34;;;22840:18;;;22833:34;;;3911:19:24;;;;;22703:18:35;;3911:41:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3902:50;;3868:161;;;3988:41;;-1:-1:-1;;;3988:41:24;;-1:-1:-1;;;;;22748:32:35;;;3988:41:24;;;22730:51:35;22797:18;;;22790:34;;;22840:18;;;22833:34;;;3988:19:24;;;;;22703:18:35;;3988:41:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3979:50;;3868:161;3715:321;;3582:454;;;;;;;;:::o;815:397:34:-;1038:51;;;-1:-1:-1;;;;;23325:15:35;;;1038:51:34;;;23307:34:35;23377:15;;;23357:18;;;23350:43;23409:18;;;;23402:34;;;1038:51:34;;;;;;;;;;23242:18:35;;;;1038:51:34;;;;;;;-1:-1:-1;;;;;1038:51:34;-1:-1:-1;;;1038:51:34;;;1027:63;;-1:-1:-1;;;;1027:10:34;;;;:63;;1038:51;1027:63;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;991:99;;;;1108:7;:57;;;;-1:-1:-1;1120:11:34;;:16;;:44;;;1151:4;1140:24;;;;;;;;;;;;:::i;:::-;1100:105;;;;-1:-1:-1;;;1100:105:34;;24191:2:35;1100:105:34;;;24173:21:35;24230:2;24210:18;;;24203:30;24269:34;24249:18;;;24242:62;-1:-1:-1;;;24320:18:35;;;24313:33;24363:19;;1100:105:34;23989:399:35;1100:105:34;903:309;;815:397;;;;:::o;4042:141:24:-;4112:28;;-1:-1:-1;;;4112:28:24;;;;;1650:25:35;;;4118:4:24;-1:-1:-1;;;;;4112:20:24;;;;1623:18:35;;4112:28:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4150:26:24;;-1:-1:-1;;;;;;;;4150:18:24;;4169:6;4150:18;:26::i;:::-;4042:141;;:::o;174:3226:33:-;906:3;992:1;-1:-1:-1;;;1169:44:33;;1159:136;;1275:2;1271:10;;;;;1242:3;1238:11;1159:136;1324:21;1321:1;1318:28;1308:119;;1407:2;1403:10;;;;;1375:2;1371:10;1308:119;1456:13;1453:1;1450:20;1440:111;;1531:2;1527:10;;;;;1499:2;1495:10;1440:111;1580:9;1577:1;1574:16;1564:106;;1651:1;1647:9;;;;;1619:2;1615:10;1564:106;2195:5;2188:13;2181:21;2177:2;2173:30;2467:9;;;2460:17;2457:1;2453:25;;;2510:9;;;2503:17;2496:25;;2553:9;;;2546:17;2539:25;;2596:9;;;2589:17;2582:25;;2639:9;;;2632:17;2625:25;;2682:9;;;2675:17;2668:25;;2725:9;;;2718:17;2711:25;;3324:9;;;3321:16;-1:-1:-1;3318:66:33;;;3361:9;;3318:66;174:3226;;;:::o;452:357:34:-;645:45;;;-1:-1:-1;;;;;24585:32:35;;;645:45:34;;;24567:51:35;24634:18;;;;24627:34;;;645:45:34;;;;;;;;;;24540:18:35;;;;645:45:34;;;;;;;-1:-1:-1;;;;;645:45:34;-1:-1:-1;;;645:45:34;;;634:57;;-1:-1:-1;;;;634:10:34;;;;:57;;645:45;634:57;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;598:93;;;;709:7;:57;;;;-1:-1:-1;721:11:34;;:16;;:44;;;752:4;741:24;;;;;;;;;;;;:::i;:::-;701:101;;;;-1:-1:-1;;;701:101:34;;24874:2:35;701:101:34;;;24856:21:35;24913:2;24893:18;;;24886:30;24952:33;24932:18;;;24925:61;25003:18;;701:101:34;24672:355:35;701:101:34;522:287;;452:357;;;:::o;9497:482:24:-;9631:11;9654:12;9669:59;9677:13;9692:9;9703:7;9712:8;9722:5;9669:7;:59::i;:::-;9654:74;;9739:14;9758:29;9769:7;9778:8;9758:10;:29::i;:::-;9738:49;;;9811:6;-1:-1:-1;;;;;9800:17:24;:7;-1:-1:-1;;;;;9800:17:24;;9797:175;;9840:48;;-1:-1:-1;;;9840:48:24;;-1:-1:-1;;;;;25281:32:35;;;9840:48:24;;;25263:51:35;25330:18;;;25323:34;;;25373:18;;;25366:34;;;25416:18;;;25409:34;;;9840:20:24;;;;;25235:19:35;;9840:48:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9831:57;;9797:175;;;9924:48;;-1:-1:-1;;;9924:48:24;;-1:-1:-1;;;;;25281:32:35;;;9924:48:24;;;25263:51:35;25330:18;;;25323:34;;;25373:18;;;25366:34;;;25416:18;;;25409:34;;;9924:20:24;;;;;25235:19:35;;9924:48:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9915:57;;9797:175;9644:335;;9497:482;;;;;;;;;:::o;92:354:34:-;283:45;;;-1:-1:-1;;;;;24585:32:35;;;283:45:34;;;24567:51:35;24634:18;;;;24627:34;;;283:45:34;;;;;;;;;;24540:18:35;;;;283:45:34;;;;;;;-1:-1:-1;;;;;283:45:34;-1:-1:-1;;;283:45:34;;;272:57;;-1:-1:-1;;;;272:10:34;;;;:57;;283:45;272:57;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;236:93;;;;347:7;:57;;;;-1:-1:-1;359:11:34;;:16;;:44;;;390:4;379:24;;;;;;;;;;;;:::i;:::-;339:100;;;;-1:-1:-1;;;339:100:34;;25656:2:35;339:100:34;;;25638:21:35;25695:2;25675:18;;;25668:30;25734:32;25714:18;;;25707:60;25784:18;;339:100:34;25454:354:35;1925:446:24;2045:12;2070:14;2086;2104:26;2115:6;2123;2104:10;:26::i;:::-;2272:36;;-1:-1:-1;;26068:2:35;26064:15;;;26060:24;;2272:36:24;;;26048:37:35;26119:15;;;26115:24;26101:12;;;26094:46;26156:12;;;26149:28;;;2069:61:24;;-1:-1:-1;2069:61:24;-1:-1:-1;2237:7:24;;26193:12:35;;2272:36:24;;;;;;;;;;;;2262:47;;;;;;2334:12;2178:182;;;;;;;;;-1:-1:-1;;;;;;26502:26:35;;26565:2;26561:15;;;;-1:-1:-1;;26557:53:35;26553:1;26544:11;;26537:74;26636:2;26627:12;;26620:28;;;;26673:2;26664:12;;26657:28;26710:2;26701:12;;26216:503;2178:182:24;;;;-1:-1:-1;;2178:182:24;;;;;;;;;2168:193;;2178:182;2168:193;;;;;1925:446;-1:-1:-1;;;;;;;;1925:446:24:o;1527:309::-;1602:14;1618;1662:6;-1:-1:-1;;;;;1652:16:24;:6;-1:-1:-1;;;;;1652:16:24;;1644:48;;;;-1:-1:-1;;;1644:48:24;;26926:2:35;1644:48:24;;;26908:21:35;26965:2;26945:18;;;26938:30;-1:-1:-1;;;26984:18:35;;;26977:49;27043:18;;1644:48:24;26724:343:35;1644:48:24;1730:6;-1:-1:-1;;;;;1721:15:24;:6;-1:-1:-1;;;;;1721:15:24;;:53;;1759:6;1767;1721:53;;;1740:6;1748;1721:53;1702:72;;-1:-1:-1;1702:72:24;-1:-1:-1;;;;;;1792:20:24;;1784:45;;;;-1:-1:-1;;;1784:45:24;;27274:2:35;1784:45:24;;;27256:21:35;27313:2;27293:18;;;27286:30;-1:-1:-1;;;27332:18:35;;;27325:42;27384:18;;1784:45:24;27072:336:35;1784:45:24;1527:309;;;;;:::o;1218:192:34:-;1325:12;;;1287;1325;;;;;;;;;-1:-1:-1;;;;;1304:7:34;;;1318:5;;1304:34;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1286:52;;;1356:7;1348:55;;;;-1:-1:-1;;;1348:55:34;;27615:2:35;1348:55:34;;;27597:21:35;27654:2;27634:18;;;27627:30;27693:34;27673:18;;;27666:62;-1:-1:-1;;;27744:18:35;;;27737:33;27787:19;;1348:55:34;27413:399:35;14:367;77:8;87:6;141:3;134:4;126:6;122:17;118:27;108:55;;159:1;156;149:12;108:55;-1:-1:-1;182:20:35;;-1:-1:-1;;;;;214:30:35;;211:50;;;257:1;254;247:12;211:50;294:4;286:6;282:17;270:29;;354:3;347:4;337:6;334:1;330:14;322:6;318:27;314:38;311:47;308:67;;;371:1;368;361:12;386:131;-1:-1:-1;;;;;461:31:35;;451:42;;441:70;;507:1;504;497:12;441:70;386:131;:::o;522:977::-;662:6;670;678;686;694;702;755:3;743:9;734:7;730:23;726:33;723:53;;;772:1;769;762:12;723:53;812:9;799:23;-1:-1:-1;;;;;882:2:35;874:6;871:14;868:34;;;898:1;895;888:12;868:34;937:70;999:7;990:6;979:9;975:22;937:70;:::i;:::-;1026:8;;-1:-1:-1;911:96:35;-1:-1:-1;1114:2:35;1099:18;;1086:32;;-1:-1:-1;1130:16:35;;;1127:36;;;1159:1;1156;1149:12;1127:36;;1198:72;1262:7;1251:8;1240:9;1236:24;1198:72;:::i;:::-;1289:8;;-1:-1:-1;1172:98:35;-1:-1:-1;;1374:2:35;1359:18;;1346:32;1387:31;1346:32;1387:31;:::i;:::-;1437:5;1427:15;;;1489:2;1478:9;1474:18;1461:32;1451:42;;522:977;;;;;;;;:::o;1686:594::-;1781:6;1789;1797;1805;1813;1866:3;1854:9;1845:7;1841:23;1837:33;1834:53;;;1883:1;1880;1873:12;1834:53;1922:9;1909:23;1941:31;1966:5;1941:31;:::i;:::-;1991:5;-1:-1:-1;2043:2:35;2028:18;;2015:32;;-1:-1:-1;2099:2:35;2084:18;;2071:32;2112:33;2071:32;2112:33;:::i;:::-;1686:594;;;;-1:-1:-1;2164:7:35;;2218:2;2203:18;;2190:32;;-1:-1:-1;2269:3:35;2254:19;2241:33;;1686:594;-1:-1:-1;;1686:594:35:o;2467:315::-;2535:6;2543;2596:2;2584:9;2575:7;2571:23;2567:32;2564:52;;;2612:1;2609;2602:12;2564:52;2651:9;2638:23;2670:31;2695:5;2670:31;:::i;:::-;2720:5;2772:2;2757:18;;;;2744:32;;-1:-1:-1;;;2467:315:35:o;2995:1046::-;3144:6;3152;3160;3168;3176;3184;3192;3245:3;3233:9;3224:7;3220:23;3216:33;3213:53;;;3262:1;3259;3252:12;3213:53;3302:9;3289:23;-1:-1:-1;;;;;3372:2:35;3364:6;3361:14;3358:34;;;3388:1;3385;3378:12;3358:34;3427:70;3489:7;3480:6;3469:9;3465:22;3427:70;:::i;:::-;3516:8;;-1:-1:-1;3401:96:35;-1:-1:-1;3604:2:35;3589:18;;3576:32;;-1:-1:-1;3620:16:35;;;3617:36;;;3649:1;3646;3639:12;3617:36;;3688:72;3752:7;3741:8;3730:9;3726:24;3688:72;:::i;:::-;3779:8;;-1:-1:-1;3662:98:35;-1:-1:-1;;3864:2:35;3849:18;;3836:32;3877:31;3836:32;3877:31;:::i;:::-;2995:1046;;;;-1:-1:-1;2995:1046:35;;;;3927:5;3979:2;3964:18;;3951:32;;-1:-1:-1;4030:3:35;4015:19;;;4002:33;;2995:1046;-1:-1:-1;;2995:1046:35:o;4046:456::-;4123:6;4131;4139;4192:2;4180:9;4171:7;4167:23;4163:32;4160:52;;;4208:1;4205;4198:12;4160:52;4247:9;4234:23;4266:31;4291:5;4266:31;:::i;:::-;4316:5;-1:-1:-1;4368:2:35;4353:18;;4340:32;;-1:-1:-1;4424:2:35;4409:18;;4396:32;4437:33;4396:32;4437:33;:::i;:::-;4489:7;4479:17;;;4046:456;;;;;:::o;4760:1088::-;4918:6;4926;4934;4942;4950;4958;5011:2;4999:9;4990:7;4986:23;4982:32;4979:52;;;5027:1;5024;5017:12;4979:52;5067:9;5054:23;-1:-1:-1;;;;;5137:2:35;5129:6;5126:14;5123:34;;;5153:1;5150;5143:12;5123:34;5192:70;5254:7;5245:6;5234:9;5230:22;5192:70;:::i;:::-;5281:8;;-1:-1:-1;5166:96:35;-1:-1:-1;5369:2:35;5354:18;;5341:32;;-1:-1:-1;5385:16:35;;;5382:36;;;5414:1;5411;5404:12;5382:36;5453:72;5517:7;5506:8;5495:9;5491:24;5453:72;:::i;:::-;5544:8;;-1:-1:-1;5427:98:35;-1:-1:-1;5632:2:35;5617:18;;5604:32;;-1:-1:-1;5648:16:35;;;5645:36;;;5677:1;5674;5667:12;5645:36;;5716:72;5780:7;5769:8;5758:9;5754:24;5716:72;:::i;:::-;4760:1088;;;;-1:-1:-1;4760:1088:35;;-1:-1:-1;4760:1088:35;;5807:8;;4760:1088;-1:-1:-1;;;4760:1088:35:o;5853:435::-;5906:3;5944:5;5938:12;5971:6;5966:3;5959:19;5997:4;6026:2;6021:3;6017:12;6010:19;;6063:2;6056:5;6052:14;6084:1;6094:169;6108:6;6105:1;6102:13;6094:169;;;6169:13;;6157:26;;6203:12;;;;6238:15;;;;6130:1;6123:9;6094:169;;;-1:-1:-1;6279:3:35;;5853:435;-1:-1:-1;;;;;5853:435:35:o;6293:465::-;6550:2;6539:9;6532:21;6513:4;6576:56;6628:2;6617:9;6613:18;6605:6;6576:56;:::i;:::-;6680:9;6672:6;6668:22;6663:2;6652:9;6648:18;6641:50;6708:44;6745:6;6737;6708:44;:::i;6763:736::-;6867:6;6875;6883;6891;6899;6907;6960:3;6948:9;6939:7;6935:23;6931:33;6928:53;;;6977:1;6974;6967:12;6928:53;7016:9;7003:23;7035:31;7060:5;7035:31;:::i;:::-;7085:5;-1:-1:-1;7142:2:35;7127:18;;7114:32;7155:33;7114:32;7155:33;:::i;:::-;7207:7;-1:-1:-1;7261:2:35;7246:18;;7233:32;;-1:-1:-1;7317:2:35;7302:18;;7289:32;7330:33;7289:32;7330:33;:::i;:::-;6763:736;;;;-1:-1:-1;6763:736:35;;7436:3;7421:19;;7408:33;;7488:3;7473:19;;;7460:33;;-1:-1:-1;6763:736:35;-1:-1:-1;;6763:736:35:o;7504:448::-;7601:6;7609;7662:2;7650:9;7641:7;7637:23;7633:32;7630:52;;;7678:1;7675;7668:12;7630:52;7718:9;7705:23;-1:-1:-1;;;;;7743:6:35;7740:30;7737:50;;;7783:1;7780;7773:12;7737:50;7822:70;7884:7;7875:6;7864:9;7860:22;7822:70;:::i;:::-;7911:8;;7796:96;;-1:-1:-1;7504:448:35;-1:-1:-1;;;;7504:448:35:o;7957:250::-;8042:1;8052:113;8066:6;8063:1;8060:13;8052:113;;;8142:11;;;8136:18;8123:11;;;8116:39;8088:2;8081:10;8052:113;;;-1:-1:-1;;8199:1:35;8181:16;;8174:27;7957:250::o;8212:270::-;8253:3;8291:5;8285:12;8318:6;8313:3;8306:19;8334:76;8403:6;8396:4;8391:3;8387:14;8380:4;8373:5;8369:16;8334:76;:::i;:::-;8464:2;8443:15;-1:-1:-1;;8439:29:35;8430:39;;;;8471:4;8426:50;;8212:270;-1:-1:-1;;8212:270:35:o;8487:800::-;8647:4;8676:2;8716;8705:9;8701:18;8746:2;8735:9;8728:21;8769:6;8804;8798:13;8835:6;8827;8820:22;8873:2;8862:9;8858:18;8851:25;;8935:2;8925:6;8922:1;8918:14;8907:9;8903:30;8899:39;8885:53;;8973:2;8965:6;8961:15;8994:1;9004:254;9018:6;9015:1;9012:13;9004:254;;;9111:2;9107:7;9095:9;9087:6;9083:22;9079:36;9074:3;9067:49;9139:39;9171:6;9162;9156:13;9139:39;:::i;:::-;9129:49;-1:-1:-1;9236:12:35;;;;9201:15;;;;9040:1;9033:9;9004:254;;;-1:-1:-1;9275:6:35;;8487:800;-1:-1:-1;;;;;;;8487:800:35:o;9292:456::-;9369:6;9377;9385;9438:2;9426:9;9417:7;9413:23;9409:32;9406:52;;;9454:1;9451;9444:12;9406:52;9493:9;9480:23;9512:31;9537:5;9512:31;:::i;:::-;9562:5;-1:-1:-1;9619:2:35;9604:18;;9591:32;9632:33;9591:32;9632:33;:::i;:::-;9292:456;;9684:7;;-1:-1:-1;;;9738:2:35;9723:18;;;;9710:32;;9292:456::o;9753:118::-;9839:5;9832:13;9825:21;9818:5;9815:32;9805:60;;9861:1;9858;9851:12;9876:523;9950:6;9958;9966;10019:2;10007:9;9998:7;9994:23;9990:32;9987:52;;;10035:1;10032;10025:12;9987:52;10074:9;10061:23;10093:31;10118:5;10093:31;:::i;:::-;10143:5;-1:-1:-1;10200:2:35;10185:18;;10172:32;10213:33;10172:32;10213:33;:::i;:::-;10265:7;-1:-1:-1;10324:2:35;10309:18;;10296:32;10337:30;10296:32;10337:30;:::i;10404:805::-;10517:6;10525;10533;10541;10549;10557;10565;10618:3;10606:9;10597:7;10593:23;10589:33;10586:53;;;10635:1;10632;10625:12;10586:53;10674:9;10661:23;10693:31;10718:5;10693:31;:::i;:::-;10743:5;-1:-1:-1;10800:2:35;10785:18;;10772:32;10813:33;10772:32;10813:33;:::i;:::-;10865:7;-1:-1:-1;10919:2:35;10904:18;;10891:32;;-1:-1:-1;10975:2:35;10960:18;;10947:32;10988:33;10947:32;10988:33;:::i;:::-;10404:805;;;;-1:-1:-1;10404:805:35;;11094:3;11079:19;;11066:33;;11146:3;11131:19;;11118:33;;-1:-1:-1;11198:3:35;11183:19;;;11170:33;;-1:-1:-1;10404:805:35;-1:-1:-1;;10404:805:35:o;11214:247::-;11273:6;11326:2;11314:9;11305:7;11301:23;11297:32;11294:52;;;11342:1;11339;11332:12;11294:52;11381:9;11368:23;11400:31;11425:5;11400:31;:::i;:::-;11450:5;11214:247;-1:-1:-1;;;11214:247:35:o;11466:687::-;11568:6;11576;11584;11592;11600;11608;11661:3;11649:9;11640:7;11636:23;11632:33;11629:53;;;11678:1;11675;11668:12;11629:53;11717:9;11704:23;11736:31;11761:5;11736:31;:::i;:::-;11786:5;-1:-1:-1;11838:2:35;11823:18;;11810:32;;-1:-1:-1;11889:2:35;11874:18;;11861:32;;-1:-1:-1;11945:2:35;11930:18;;11917:32;11993:4;11980:18;;11968:31;;11958:59;;12013:1;12010;12003:12;12158:930;12252:6;12260;12268;12276;12284;12337:3;12325:9;12316:7;12312:23;12308:33;12305:53;;;12354:1;12351;12344:12;12305:53;12393:9;12380:23;12412:31;12437:5;12412:31;:::i;:::-;12462:5;-1:-1:-1;12519:2:35;12504:18;;12491:32;12532:30;12491:32;12532:30;:::i;:::-;12581:7;-1:-1:-1;12635:2:35;12620:18;;12607:32;;-1:-1:-1;12690:2:35;12675:18;;12662:32;-1:-1:-1;;;;;12743:14:35;;;12740:34;;;12770:1;12767;12760:12;12740:34;12808:6;12797:9;12793:22;12783:32;;12853:7;12846:4;12842:2;12838:13;12834:27;12824:55;;12875:1;12872;12865:12;12824:55;12915:2;12902:16;12941:2;12933:6;12930:14;12927:34;;;12957:1;12954;12947:12;12927:34;13002:7;12997:2;12988:6;12984:2;12980:15;12976:24;12973:37;12970:57;;;13023:1;13020;13013:12;12970:57;12158:930;;;;-1:-1:-1;12158:930:35;;-1:-1:-1;13054:2:35;13046:11;;13076:6;12158:930;-1:-1:-1;;;12158:930:35:o;13093:525::-;13179:6;13187;13195;13203;13256:3;13244:9;13235:7;13231:23;13227:33;13224:53;;;13273:1;13270;13263:12;13224:53;13312:9;13299:23;13331:31;13356:5;13331:31;:::i;:::-;13381:5;-1:-1:-1;13433:2:35;13418:18;;13405:32;;-1:-1:-1;13489:2:35;13474:18;;13461:32;13502:33;13461:32;13502:33;:::i;:::-;13093:525;;;;-1:-1:-1;13554:7:35;;13608:2;13593:18;13580:32;;-1:-1:-1;;13093:525:35:o;13623:350::-;13825:2;13807:21;;;13864:2;13844:18;;;13837:30;13903:28;13898:2;13883:18;;13876:56;13964:2;13949:18;;13623:350::o;13978:127::-;14039:10;14034:3;14030:20;14027:1;14020:31;14070:4;14067:1;14060:15;14094:4;14091:1;14084:15;14463:245;14542:6;14550;14603:2;14591:9;14582:7;14578:23;14574:32;14571:52;;;14619:1;14616;14609:12;14571:52;-1:-1:-1;;14642:16:35;;14698:2;14683:18;;;14677:25;14642:16;;14677:25;;-1:-1:-1;14463:245:35:o;14713:175::-;14791:13;;-1:-1:-1;;;;;14833:30:35;;14823:41;;14813:69;;14878:1;14875;14868:12;14893:289;14970:6;14978;15031:2;15019:9;15010:7;15006:23;15002:32;14999:52;;;15047:1;15044;15037:12;14999:52;15070:39;15099:9;15070:39;:::i;:::-;15060:49;;15128:48;15172:2;15161:9;15157:18;15128:48;:::i;:::-;15118:58;;14893:289;;;;;:::o;15187:127::-;15248:10;15243:3;15239:20;15236:1;15229:31;15279:4;15276:1;15269:15;15303:4;15300:1;15293:15;15319:128;15386:9;;;15407:11;;;15404:37;;;15421:18;;:::i;15452:422::-;15541:1;15584:5;15541:1;15598:270;15619:7;15609:8;15606:21;15598:270;;;15678:4;15674:1;15670:6;15666:17;15660:4;15657:27;15654:53;;;15687:18;;:::i;:::-;15737:7;15727:8;15723:22;15720:55;;;15757:16;;;;15720:55;15836:22;;;;15796:15;;;;15598:270;;;15602:3;15452:422;;;;;:::o;15879:806::-;15928:5;15958:8;15948:80;;-1:-1:-1;15999:1:35;16013:5;;15948:80;16047:4;16037:76;;-1:-1:-1;16084:1:35;16098:5;;16037:76;16129:4;16147:1;16142:59;;;;16215:1;16210:130;;;;16122:218;;16142:59;16172:1;16163:10;;16186:5;;;16210:130;16247:3;16237:8;16234:17;16231:43;;;16254:18;;:::i;:::-;-1:-1:-1;;16310:1:35;16296:16;;16325:5;;16122:218;;16424:2;16414:8;16411:16;16405:3;16399:4;16396:13;16392:36;16386:2;16376:8;16373:16;16368:2;16362:4;16359:12;16355:35;16352:77;16349:159;;;-1:-1:-1;16461:19:35;;;16493:5;;16349:159;16540:34;16565:8;16559:4;16540:34;:::i;:::-;16610:6;16606:1;16602:6;16598:19;16589:7;16586:32;16583:58;;;16621:18;;:::i;:::-;16659:20;;15879:806;-1:-1:-1;;;15879:806:35:o;16690:140::-;16748:5;16777:47;16818:4;16808:8;16804:19;16798:4;16777:47;:::i;16835:168::-;16908:9;;;16939;;16956:15;;;16950:22;;16936:37;16926:71;;16977:18;;:::i;17008:217::-;17048:1;17074;17064:132;;17118:10;17113:3;17109:20;17106:1;17099:31;17153:4;17150:1;17143:15;17181:4;17178:1;17171:15;17064:132;-1:-1:-1;17210:9:35;;17008:217::o;17962:127::-;18023:10;18018:3;18014:20;18011:1;18004:31;18054:4;18051:1;18044:15;18078:4;18075:1;18068:15;18094:251;18164:6;18217:2;18205:9;18196:7;18192:23;18188:32;18185:52;;;18233:1;18230;18223:12;18185:52;18265:9;18259:16;18284:31;18309:5;18284:31;:::i;18350:521::-;18427:4;18433:6;18493:11;18480:25;18587:2;18583:7;18572:8;18556:14;18552:29;18548:43;18528:18;18524:68;18514:96;;18606:1;18603;18596:12;18514:96;18633:33;;18685:20;;;-1:-1:-1;;;;;;18717:30:35;;18714:50;;;18760:1;18757;18750:12;18714:50;18793:4;18781:17;;-1:-1:-1;18824:14:35;18820:27;;;18810:38;;18807:58;;;18861:1;18858;18851:12;18876:271;19059:6;19051;19046:3;19033:33;19015:3;19085:16;;19110:13;;;19085:16;18876:271;-1:-1:-1;18876:271:35:o;19152:897::-;19232:6;19285:2;19273:9;19264:7;19260:23;19256:32;19253:52;;;19301:1;19298;19291:12;19253:52;19334:9;19328:16;-1:-1:-1;;;;;19404:2:35;19396:6;19393:14;19390:34;;;19420:1;19417;19410:12;19390:34;19458:6;19447:9;19443:22;19433:32;;19503:7;19496:4;19492:2;19488:13;19484:27;19474:55;;19525:1;19522;19515:12;19474:55;19554:2;19548:9;19576:2;19572;19569:10;19566:36;;;19582:18;;:::i;:::-;19657:2;19651:9;19625:2;19711:13;;-1:-1:-1;;19707:22:35;;;19731:2;19703:31;19699:40;19687:53;;;19755:18;;;19775:22;;;19752:46;19749:72;;;19801:18;;:::i;:::-;19841:10;19837:2;19830:22;19876:2;19868:6;19861:18;19916:7;19911:2;19906;19902;19898:11;19894:20;19891:33;19888:53;;;19937:1;19934;19927:12;19888:53;19950:68;20015:2;20010;20002:6;19998:15;19993:2;19989;19985:11;19950:68;:::i;20054:219::-;20203:2;20192:9;20185:21;20166:4;20223:44;20263:2;20252:9;20248:18;20240:6;20223:44;:::i;20278:135::-;20317:3;20338:17;;;20335:43;;20358:18;;:::i;:::-;-1:-1:-1;20405:1:35;20394:13;;20278:135::o;20418:332::-;20620:2;20602:21;;;20659:1;20639:18;;;20632:29;-1:-1:-1;;;20692:2:35;20677:18;;20670:39;20741:2;20726:18;;20418:332::o;21779:744::-;-1:-1:-1;;;;;22080:15:35;;;22062:34;;22132:15;;22127:2;22112:18;;22105:43;22191:14;;22184:22;22179:2;22164:18;;22157:50;22238:2;22223:18;;22216:34;;;22042:3;22281;22266:19;;22259:32;;;22307:19;;22300:35;;;22005:4;22328:6;22378;22372:3;22357:19;;22344:49;22443:1;22437:3;22428:6;22417:9;22413:22;22409:32;22402:43;22513:3;22506:2;22502:7;22497:2;22489:6;22485:15;22481:29;22470:9;22466:45;22462:55;22454:63;;21779:744;;;;;;;;;:::o;22878:184::-;22948:6;23001:2;22989:9;22980:7;22976:23;22972:32;22969:52;;;23017:1;23014;23007:12;22969:52;-1:-1:-1;23040:16:35;;22878:184;-1:-1:-1;22878:184:35:o;23447:287::-;23576:3;23614:6;23608:13;23630:66;23689:6;23684:3;23677:4;23669:6;23665:17;23630:66;:::i;:::-;23712:16;;;;;23447:287;-1:-1:-1;;23447:287:35:o;23739:245::-;23806:6;23859:2;23847:9;23838:7;23834:23;23830:32;23827:52;;;23875:1;23872;23865:12;23827:52;23907:9;23901:16;23926:28;23948:5;23926:28;:::i",
    "linkReferences": {},
    "immutableReferences": {
      "38413": [
        { "start": 329, "length": 32 },
        { "start": 949, "length": 32 },
        { "start": 1253, "length": 32 },
        { "start": 1421, "length": 32 },
        { "start": 1843, "length": 32 },
        { "start": 2285, "length": 32 },
        { "start": 4126, "length": 32 },
        { "start": 4231, "length": 32 },
        { "start": 4350, "length": 32 },
        { "start": 5399, "length": 32 },
        { "start": 5518, "length": 32 },
        { "start": 6269, "length": 32 }
      ],
      "38415": [
        { "start": 550, "length": 32 },
        { "start": 5563, "length": 32 },
        { "start": 6855, "length": 32 }
      ],
      "38417": [
        { "start": 466, "length": 32 },
        { "start": 5596, "length": 32 },
        { "start": 6888, "length": 32 }
      ]
    }
  },
  "methodIdentifiers": {
    "CODE_HASH()": "0dff1165",
    "DYSON_FACTORY()": "429d9b1d",
    "WETH()": "ad5c4648",
    "deposit(address,address,uint256,address,uint256,uint256,uint256)": "d29f1409",
    "depositETH(address,uint256,address,uint256,uint256)": "8865305b",
    "fairPrice(address,uint256)": "12713bd2",
    "multicall(bytes[])": "ac9650d8",
    "owner()": "8da5cb5b",
    "rely(address,address,bool)": "c58b6a10",
    "rescueERC20(address,address,uint256)": "b2118a8d",
    "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": "f3995c67",
    "setApprovalForAllWithSig(address,bool,uint256,bytes)": "f5eacc2f",
    "swap(address,address,uint256,address,uint256,uint256)": "7129b640",
    "swapETHIn(address,uint256,address,uint256)": "fecc1b9f",
    "swapETHInWithMultiHops(address[],uint256[],address,uint256)": "01c838fe",
    "swapETHOut(address,uint256,address,uint256,uint256)": "0cd19cbe",
    "swapETHOutWithMultiHops(address[],uint256[],address,uint256,uint256)": "687a0b10",
    "swapWithMultiHops(address[],uint256[],address,uint256,uint256)": "6d48058e",
    "transferOwnership(address)": "f2fde38b",
    "withdraw(address,uint256,address)": "69328dec",
    "withdrawETH(address,uint256,address)": "80500d20",
    "withdrawMultiPositions(address[],uint256[],address[])": "6d3a957c"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"TransferOwnership\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CODE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DYSON_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"depositETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"token0Amt\",\"type\":\"uint256\"}],\"name\":\"fairPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token1Amt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"selfPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"sig\",\"type\":\"bytes\"}],\"name\":\"setApprovalForAllWithSig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutput\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutput\",\"type\":\"uint256\"}],\"name\":\"swapETHIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minOutput\",\"type\":\"uint256\"}],\"name\":\"swapETHInWithMultiHops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutput\",\"type\":\"uint256\"}],\"name\":\"swapETHOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutput\",\"type\":\"uint256\"}],\"name\":\"swapETHOutWithMultiHops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"input\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutput\",\"type\":\"uint256\"}],\"name\":\"swapWithMultiHops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"output\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"}],\"name\":\"withdrawMultiPositions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"token0Amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"token1Amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"IMPORTANT: Fund stuck or send to this contract is free for grab as `pair` param in each swap functions is passed in and not validated so everyone can implement their own `pair` contract and transfer the fund away.\",\"kind\":\"dev\",\"methods\":{\"deposit(address,address,uint256,address,uint256,uint256,uint256)\":{\"params\":{\"index\":\"Number of pair instance\",\"input\":\"Amount of tokenIn to deposit\",\"minOutput\":\"Minimum amount of tokenOut expected to receive if the swap is perfromed\",\"time\":\"Lock time\",\"to\":\"Address that will receive Pair note\",\"tokenIn\":\"Address of spent token\",\"tokenOut\":\"Address of received token\"},\"returns\":{\"output\":\"Amount of tokenOut received if the swap is performed\"}},\"depositETH(address,uint256,address,uint256,uint256)\":{\"params\":{\"index\":\"Number of pair instance\",\"minOutput\":\"Minimum amount of tokenOut expected to receive if the swap is perfromed\",\"time\":\"Lock time\",\"to\":\"Address that will receive Pair note\",\"tokenOut\":\"Address of received token\"},\"returns\":{\"output\":\"Amount of tokenOut received if the swap is performed\"}},\"fairPrice(address,uint256)\":{\"params\":{\"pair\":\"`Pair` contract address\",\"token0Amt\":\"Amount of token0\"},\"returns\":{\"token1Amt\":\"Amount of token1\"}},\"multicall(bytes[])\":{\"params\":{\"data\":\"Array of bytes of function calldata to be delegatecalled\"}},\"rely(address,address,bool)\":{\"params\":{\"contractAddress\":\"Address to grant allowance\",\"enable\":\"True to enable allowance. False otherwise.\",\"tokenAddress\":\"Address of token to approve\"}},\"rescueERC20(address,address,uint256)\":{\"params\":{\"amount\":\"Amount of token to be rescued\",\"to\":\"Address that will receive token\",\"tokenAddress\":\"Address of token to be rescued\"}},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"A timestamp, the current blocktime must be less than or equal to this timestamp\",\"r\":\"Must produce valid secp256k1 signature from the holder along with v and s\",\"s\":\"Must produce valid secp256k1 signature from the holder along with v and r\",\"token\":\"The address of the token spent\",\"v\":\"Must produce valid secp256k1 signature from the holder along with r and s\",\"value\":\"The amount that can be spent of token\"}},\"setApprovalForAllWithSig(address,bool,uint256,bytes)\":{\"params\":{\"approved\":\"True to approve, false to revoke\",\"deadline\":\"Deadline when the signature expires\",\"pair\":\"`Pair` contract address\",\"sig\":\"Signature\"}},\"swap(address,address,uint256,address,uint256,uint256)\":{\"params\":{\"index\":\"Number of pair instance\",\"input\":\"Amount of tokenIn to swap\",\"minOutput\":\"Minimum of tokenOut expected to receive\",\"to\":\"Address that will receive tokenOut\",\"tokenIn\":\"Address of spent token\",\"tokenOut\":\"Address of received token\"},\"returns\":{\"output\":\"Amount of tokenOut received\"}},\"swapETHIn(address,uint256,address,uint256)\":{\"params\":{\"index\":\"Number of pair instance\",\"minOutput\":\"Minimum of token1 expected to receive\",\"to\":\"Address that will receive tokenOut\",\"tokenOut\":\"Address of received token\"},\"returns\":{\"output\":\"Amount of tokenOut received\"}},\"swapETHInWithMultiHops(address[],uint256[],address,uint256)\":{\"params\":{\"indexes\":\"Array of pair instance\",\"minOutput\":\"Minimum of tokenOut expected to receive\",\"to\":\"Address that will receive tokenOut\",\"tokens\":\"Array of swapping tokens\"},\"returns\":{\"output\":\"Amount of tokenOut received\"}},\"swapETHOut(address,uint256,address,uint256,uint256)\":{\"params\":{\"index\":\"Number of pair instance\",\"input\":\"Amount of tokenIn to swap\",\"minOutput\":\"Minimum of ETH expected to receive\",\"to\":\"Address that will receive ETH\",\"tokenIn\":\"Address of spent token\"},\"returns\":{\"output\":\"Amount of ETH received\"}},\"swapETHOutWithMultiHops(address[],uint256[],address,uint256,uint256)\":{\"params\":{\"indexes\":\"Array of pair instance\",\"input\":\"Amount of tokenIn to swap\",\"minOutput\":\"Minimum of ETH expected to receive\",\"to\":\"Address that will receive ETH\",\"tokens\":\"Array of swapping tokens\"},\"returns\":{\"output\":\"Amount of ETH received\"}},\"swapWithMultiHops(address[],uint256[],address,uint256,uint256)\":{\"params\":{\"indexes\":\"Array of pair instance\",\"input\":\"Amount of tokenIn to swap\",\"minOutput\":\"Minimum of tokenOut expected to receive\",\"to\":\"Address that will receive tokenOut\",\"tokens\":\"Array of swapping tokens\"},\"returns\":{\"output\":\"Amount of tokenOut received\"}},\"withdraw(address,uint256,address)\":{\"params\":{\"index\":\"Index of the note to withdraw\",\"pair\":\"`Pair` contract address\",\"to\":\"Address that will receive either token0 or token1\"},\"returns\":{\"token0Amt\":\"Amount of token0 withdrawn\",\"token1Amt\":\"Amount of token1 withdrawn\"}},\"withdrawETH(address,uint256,address)\":{\"params\":{\"index\":\"Index of the note to withdraw\",\"pair\":\"`Pair` contract address\",\"to\":\"Address that will receive either token0 or token1\"},\"returns\":{\"token0Amt\":\"Amount of token0 withdrawn\",\"token1Amt\":\"Amount of token1 withdrawn\"}},\"withdrawMultiPositions(address[],uint256[],address[])\":{\"params\":{\"indexes\":\"array of index of the note to withdraw\",\"pairs\":\"array of `Pair` contract addresses\",\"tos\":\"array of address that will receive either token0 or token1\"},\"returns\":{\"token0Amounts\":\"array of amount of token0 withdrawn\",\"token1Amounts\":\"array of amount of token1 withdrawn\"}}},\"title\":\"Router contract for all Pair contracts\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(address,address,uint256,address,uint256,uint256,uint256)\":{\"notice\":\"Deposit tokenIn\"},\"depositETH(address,uint256,address,uint256,uint256)\":{\"notice\":\"Deposit ETH\"},\"fairPrice(address,uint256)\":{\"notice\":\"Calculate the price of token1 in token0 Formula: amount1 = amount0 * reserve1 * sqrt(1-fee0) / reserve0 / sqrt(1-fee1) which can be transformed to: amount1 = sqrt( amount0**2 * (1-fee0) / (1-fee1) ) * reserve1 / reserve0\"},\"multicall(bytes[])\":{\"notice\":\"Multi delegatecall without supporting payable\"},\"rely(address,address,bool)\":{\"notice\":\"Allow another address to transfer token from this contract\"},\"rescueERC20(address,address,uint256)\":{\"notice\":\"rescue token stucked in this contract\"},\"selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Permits this contract to spend a given token from msg.sender The owner is always msg.sender and the spender is always address(this).\"},\"setApprovalForAllWithSig(address,bool,uint256,bytes)\":{\"notice\":\"Set approval for all position of a pair User who signs the approval signature must be the one who calls this function\"},\"swap(address,address,uint256,address,uint256,uint256)\":{\"notice\":\"Swap tokenIn for tokenOut\"},\"swapETHIn(address,uint256,address,uint256)\":{\"notice\":\"Swap ETH for tokenOut\"},\"swapETHInWithMultiHops(address[],uint256[],address,uint256)\":{\"notice\":\"Swap ETH for tokenOut with multiple hops tokens[0] must be WETH\"},\"swapETHOut(address,uint256,address,uint256,uint256)\":{\"notice\":\"Swap tokenIn for ETH\"},\"swapETHOutWithMultiHops(address[],uint256[],address,uint256,uint256)\":{\"notice\":\"Swap tokenIn for ETH with multiple hops tokens[tokens.length - 1] must be WETH\"},\"swapWithMultiHops(address[],uint256[],address,uint256,uint256)\":{\"notice\":\"Swap tokenIn for tokenOut with multiple hops\"},\"withdraw(address,uint256,address)\":{\"notice\":\"Withdrw Pair note.\"},\"withdrawETH(address,uint256,address)\":{\"notice\":\"Withdrw Pair note and if either token0 or token1 withdrawn is WETH, withdraw from WETH and send ETH to receiver. User who signs the withdraw signature must be the one who calls this function\"},\"withdrawMultiPositions(address[],uint256[],address[])\":{\"notice\":\"Withdraw multiple Pair notes. User who call this function must set approval for all position of each pair in advance\"}},\"notice\":\"Users are expected to swap, deposit and withdraw via this contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Router.sol\":\"Router\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":forge-std/=lib/forge-std/src/\"]},\"sources\":{\"src/Router.sol\":{\"keccak256\":\"0x64f010c31d0d14f3fc22d0d9a6f69f0d9b78ae6053938df1472a660701481a16\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://9a171c724a852759a2a7c2825ee16eb5b47a1f47916fae68b61428e0b83dde92\",\"dweb:/ipfs/QmQsEWhgkqm2cVaT6SBqmscNp7ZjatS6hdfyyE3f9ezjh6\"]},\"src/interface/IERC20.sol\":{\"keccak256\":\"0x51ff9ea85b0f83b9651f80655a00aa2ec4987daff855298fe4a3f24282dac100\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cfed1e5e479d176e4d9e6a45cb65a20c936ccb302e2143e08f95932f944cd6d8\",\"dweb:/ipfs/Qmem1eNQVJ1mGJWiYT6coCYPJccqLEmz533cFDGPDkU1zS\"]},\"src/interface/IERC20Permit.sol\":{\"keccak256\":\"0x4a50e7f9a06e623cebe4f4e51052eaa7679028b3342754aba2d10d24c6abda7b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a5eacd3700760adb5cd4172f6fd69a76ea2ff8a636d0dae65174ee11f4b92bc5\",\"dweb:/ipfs/Qmaq6m7MYpYUe8F7b4sbPom939xM1wfUvtoRqTZ43KvQTW\"]},\"src/interface/IFactory.sol\":{\"keccak256\":\"0xe8d5a70aa8f094757d651a162cdb05600dbace6f70c9aaf68d52551c81b0b26a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e7078f64c08c12d096d54893285f98d566572171d242f0c7c6e50243e123fe8\",\"dweb:/ipfs/QmW7sqvvHvEHPiSvartuLWpnWnhxVktPeHzAFVkw2yeyJC\"]},\"src/interface/IPair.sol\":{\"keccak256\":\"0xa5371d37be748fc644e150a7ff06431be0e88be37a5efd3ea0b45a87b4241c51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6f1b79db5eb3a1ccdc6d664fa69fccea067cfb84c93238f332ef37a60e06c6c7\",\"dweb:/ipfs/QmVExJh8Tt1wTKLG5FGUGYkMqX1uKeG4AVgk9UDoZFPLvn\"]},\"src/interface/IWETH.sol\":{\"keccak256\":\"0x17cebb847163242a19abfdf3d346a5ae8f08f4bbc641309c3224fde211654f2a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8768c79f4273411cea39bf2b737b4b32af9eec648ba4ae77340f78988109c61c\",\"dweb:/ipfs/QmWGsyd11VwFuV6z2DiashMV4xFhyREH2ymnfjKwnTx3XS\"]},\"src/lib/SqrtMath.sol\":{\"keccak256\":\"0x02ab63ab65b170865ded5cef5b7c3f687631d367aba1d2fb45bdbc13e2c7a324\",\"license\":\"AGPL-2.0\",\"urls\":[\"bzz-raw://385257744e989eca330cbfdf959b17fb0b656b7692a346ea8cecfac2ef5ad465\",\"dweb:/ipfs/QmdR2uuBBHEW78dRSuFhFyz1taSi4KZBSMmo8z6XwHB5kq\"]},\"src/lib/TransferHelper.sol\":{\"keccak256\":\"0xe0e02257681bc57b2f48dee084a993d84a27b73c746155e721744df81d1a43fb\",\"license\":\"AGPL-2.0\",\"urls\":[\"bzz-raw://62035f13e2a80b4e43edd920e8dd34e4a6ae34508055695b3eeabf48679fde44\",\"dweb:/ipfs/QmVE2W8MhPtA6gnC26qUfa9u9yUg5w42y4H41M9NLMSyaP\"]}},\"version\":1}",
  "metadata": {
    "compiler": { "version": "0.8.17+commit.8df45f5f" },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            { "internalType": "address", "name": "_WETH", "type": "address" },
            { "internalType": "address", "name": "_owner", "type": "address" },
            { "internalType": "address", "name": "_factory", "type": "address" }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "TransferOwnership",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "CODE_HASH",
          "outputs": [
            { "internalType": "bytes32", "name": "", "type": "bytes32" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "DYSON_FACTORY",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "WETH",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "tokenIn", "type": "address" },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            { "internalType": "uint256", "name": "index", "type": "uint256" },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint256", "name": "input", "type": "uint256" },
            {
              "internalType": "uint256",
              "name": "minOutput",
              "type": "uint256"
            },
            { "internalType": "uint256", "name": "time", "type": "uint256" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "deposit",
          "outputs": [
            { "internalType": "uint256", "name": "output", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            { "internalType": "uint256", "name": "index", "type": "uint256" },
            { "internalType": "address", "name": "to", "type": "address" },
            {
              "internalType": "uint256",
              "name": "minOutput",
              "type": "uint256"
            },
            { "internalType": "uint256", "name": "time", "type": "uint256" }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "depositETH",
          "outputs": [
            { "internalType": "uint256", "name": "output", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "pair", "type": "address" },
            {
              "internalType": "uint256",
              "name": "token0Amt",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "fairPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "token1Amt",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            { "internalType": "bytes[]", "name": "data", "type": "bytes[]" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "multicall",
          "outputs": [
            { "internalType": "bytes[]", "name": "results", "type": "bytes[]" }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            { "internalType": "address", "name": "", "type": "address" }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            { "internalType": "bool", "name": "enable", "type": "bool" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "rely"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint256", "name": "amount", "type": "uint256" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "rescueERC20"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "token", "type": "address" },
            { "internalType": "uint256", "name": "value", "type": "uint256" },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            { "internalType": "uint8", "name": "v", "type": "uint8" },
            { "internalType": "bytes32", "name": "r", "type": "bytes32" },
            { "internalType": "bytes32", "name": "s", "type": "bytes32" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "selfPermit"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "pair", "type": "address" },
            { "internalType": "bool", "name": "approved", "type": "bool" },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            { "internalType": "bytes", "name": "sig", "type": "bytes" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setApprovalForAllWithSig"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "tokenIn", "type": "address" },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            { "internalType": "uint256", "name": "index", "type": "uint256" },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint256", "name": "input", "type": "uint256" },
            {
              "internalType": "uint256",
              "name": "minOutput",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "swap",
          "outputs": [
            { "internalType": "uint256", "name": "output", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            { "internalType": "uint256", "name": "index", "type": "uint256" },
            { "internalType": "address", "name": "to", "type": "address" },
            {
              "internalType": "uint256",
              "name": "minOutput",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "swapETHIn",
          "outputs": [
            { "internalType": "uint256", "name": "output", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "indexes",
              "type": "uint256[]"
            },
            { "internalType": "address", "name": "to", "type": "address" },
            {
              "internalType": "uint256",
              "name": "minOutput",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "swapETHInWithMultiHops",
          "outputs": [
            { "internalType": "uint256", "name": "output", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "tokenIn", "type": "address" },
            { "internalType": "uint256", "name": "index", "type": "uint256" },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint256", "name": "input", "type": "uint256" },
            {
              "internalType": "uint256",
              "name": "minOutput",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "swapETHOut",
          "outputs": [
            { "internalType": "uint256", "name": "output", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "indexes",
              "type": "uint256[]"
            },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint256", "name": "input", "type": "uint256" },
            {
              "internalType": "uint256",
              "name": "minOutput",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "swapETHOutWithMultiHops",
          "outputs": [
            { "internalType": "uint256", "name": "output", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "indexes",
              "type": "uint256[]"
            },
            { "internalType": "address", "name": "to", "type": "address" },
            { "internalType": "uint256", "name": "input", "type": "uint256" },
            {
              "internalType": "uint256",
              "name": "minOutput",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "swapWithMultiHops",
          "outputs": [
            { "internalType": "uint256", "name": "output", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "_owner", "type": "address" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [
            { "internalType": "address", "name": "pair", "type": "address" },
            { "internalType": "uint256", "name": "index", "type": "uint256" },
            { "internalType": "address", "name": "to", "type": "address" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdraw",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "token0Amt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1Amt",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            { "internalType": "address", "name": "pair", "type": "address" },
            { "internalType": "uint256", "name": "index", "type": "uint256" },
            { "internalType": "address", "name": "to", "type": "address" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawETH",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "token0Amt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1Amt",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "pairs",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "indexes",
              "type": "uint256[]"
            },
            { "internalType": "address[]", "name": "tos", "type": "address[]" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "withdrawMultiPositions",
          "outputs": [
            {
              "internalType": "uint256[]",
              "name": "token0Amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "token1Amounts",
              "type": "uint256[]"
            }
          ]
        },
        { "inputs": [], "stateMutability": "payable", "type": "receive" }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "deposit(address,address,uint256,address,uint256,uint256,uint256)": {
            "params": {
              "index": "Number of pair instance",
              "input": "Amount of tokenIn to deposit",
              "minOutput": "Minimum amount of tokenOut expected to receive if the swap is perfromed",
              "time": "Lock time",
              "to": "Address that will receive Pair note",
              "tokenIn": "Address of spent token",
              "tokenOut": "Address of received token"
            },
            "returns": {
              "output": "Amount of tokenOut received if the swap is performed"
            }
          },
          "depositETH(address,uint256,address,uint256,uint256)": {
            "params": {
              "index": "Number of pair instance",
              "minOutput": "Minimum amount of tokenOut expected to receive if the swap is perfromed",
              "time": "Lock time",
              "to": "Address that will receive Pair note",
              "tokenOut": "Address of received token"
            },
            "returns": {
              "output": "Amount of tokenOut received if the swap is performed"
            }
          },
          "fairPrice(address,uint256)": {
            "params": {
              "pair": "`Pair` contract address",
              "token0Amt": "Amount of token0"
            },
            "returns": { "token1Amt": "Amount of token1" }
          },
          "multicall(bytes[])": {
            "params": {
              "data": "Array of bytes of function calldata to be delegatecalled"
            }
          },
          "rely(address,address,bool)": {
            "params": {
              "contractAddress": "Address to grant allowance",
              "enable": "True to enable allowance. False otherwise.",
              "tokenAddress": "Address of token to approve"
            }
          },
          "rescueERC20(address,address,uint256)": {
            "params": {
              "amount": "Amount of token to be rescued",
              "to": "Address that will receive token",
              "tokenAddress": "Address of token to be rescued"
            }
          },
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
            "params": {
              "deadline": "A timestamp, the current blocktime must be less than or equal to this timestamp",
              "r": "Must produce valid secp256k1 signature from the holder along with v and s",
              "s": "Must produce valid secp256k1 signature from the holder along with v and r",
              "token": "The address of the token spent",
              "v": "Must produce valid secp256k1 signature from the holder along with r and s",
              "value": "The amount that can be spent of token"
            }
          },
          "setApprovalForAllWithSig(address,bool,uint256,bytes)": {
            "params": {
              "approved": "True to approve, false to revoke",
              "deadline": "Deadline when the signature expires",
              "pair": "`Pair` contract address",
              "sig": "Signature"
            }
          },
          "swap(address,address,uint256,address,uint256,uint256)": {
            "params": {
              "index": "Number of pair instance",
              "input": "Amount of tokenIn to swap",
              "minOutput": "Minimum of tokenOut expected to receive",
              "to": "Address that will receive tokenOut",
              "tokenIn": "Address of spent token",
              "tokenOut": "Address of received token"
            },
            "returns": { "output": "Amount of tokenOut received" }
          },
          "swapETHIn(address,uint256,address,uint256)": {
            "params": {
              "index": "Number of pair instance",
              "minOutput": "Minimum of token1 expected to receive",
              "to": "Address that will receive tokenOut",
              "tokenOut": "Address of received token"
            },
            "returns": { "output": "Amount of tokenOut received" }
          },
          "swapETHInWithMultiHops(address[],uint256[],address,uint256)": {
            "params": {
              "indexes": "Array of pair instance",
              "minOutput": "Minimum of tokenOut expected to receive",
              "to": "Address that will receive tokenOut",
              "tokens": "Array of swapping tokens"
            },
            "returns": { "output": "Amount of tokenOut received" }
          },
          "swapETHOut(address,uint256,address,uint256,uint256)": {
            "params": {
              "index": "Number of pair instance",
              "input": "Amount of tokenIn to swap",
              "minOutput": "Minimum of ETH expected to receive",
              "to": "Address that will receive ETH",
              "tokenIn": "Address of spent token"
            },
            "returns": { "output": "Amount of ETH received" }
          },
          "swapETHOutWithMultiHops(address[],uint256[],address,uint256,uint256)": {
            "params": {
              "indexes": "Array of pair instance",
              "input": "Amount of tokenIn to swap",
              "minOutput": "Minimum of ETH expected to receive",
              "to": "Address that will receive ETH",
              "tokens": "Array of swapping tokens"
            },
            "returns": { "output": "Amount of ETH received" }
          },
          "swapWithMultiHops(address[],uint256[],address,uint256,uint256)": {
            "params": {
              "indexes": "Array of pair instance",
              "input": "Amount of tokenIn to swap",
              "minOutput": "Minimum of tokenOut expected to receive",
              "to": "Address that will receive tokenOut",
              "tokens": "Array of swapping tokens"
            },
            "returns": { "output": "Amount of tokenOut received" }
          },
          "withdraw(address,uint256,address)": {
            "params": {
              "index": "Index of the note to withdraw",
              "pair": "`Pair` contract address",
              "to": "Address that will receive either token0 or token1"
            },
            "returns": {
              "token0Amt": "Amount of token0 withdrawn",
              "token1Amt": "Amount of token1 withdrawn"
            }
          },
          "withdrawETH(address,uint256,address)": {
            "params": {
              "index": "Index of the note to withdraw",
              "pair": "`Pair` contract address",
              "to": "Address that will receive either token0 or token1"
            },
            "returns": {
              "token0Amt": "Amount of token0 withdrawn",
              "token1Amt": "Amount of token1 withdrawn"
            }
          },
          "withdrawMultiPositions(address[],uint256[],address[])": {
            "params": {
              "indexes": "array of index of the note to withdraw",
              "pairs": "array of `Pair` contract addresses",
              "tos": "array of address that will receive either token0 or token1"
            },
            "returns": {
              "token0Amounts": "array of amount of token0 withdrawn",
              "token1Amounts": "array of amount of token1 withdrawn"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "deposit(address,address,uint256,address,uint256,uint256,uint256)": {
            "notice": "Deposit tokenIn"
          },
          "depositETH(address,uint256,address,uint256,uint256)": {
            "notice": "Deposit ETH"
          },
          "fairPrice(address,uint256)": {
            "notice": "Calculate the price of token1 in token0 Formula: amount1 = amount0 * reserve1 * sqrt(1-fee0) / reserve0 / sqrt(1-fee1) which can be transformed to: amount1 = sqrt( amount0**2 * (1-fee0) / (1-fee1) ) * reserve1 / reserve0"
          },
          "multicall(bytes[])": {
            "notice": "Multi delegatecall without supporting payable"
          },
          "rely(address,address,bool)": {
            "notice": "Allow another address to transfer token from this contract"
          },
          "rescueERC20(address,address,uint256)": {
            "notice": "rescue token stucked in this contract"
          },
          "selfPermit(address,uint256,uint256,uint8,bytes32,bytes32)": {
            "notice": "Permits this contract to spend a given token from msg.sender The owner is always msg.sender and the spender is always address(this)."
          },
          "setApprovalForAllWithSig(address,bool,uint256,bytes)": {
            "notice": "Set approval for all position of a pair User who signs the approval signature must be the one who calls this function"
          },
          "swap(address,address,uint256,address,uint256,uint256)": {
            "notice": "Swap tokenIn for tokenOut"
          },
          "swapETHIn(address,uint256,address,uint256)": {
            "notice": "Swap ETH for tokenOut"
          },
          "swapETHInWithMultiHops(address[],uint256[],address,uint256)": {
            "notice": "Swap ETH for tokenOut with multiple hops tokens[0] must be WETH"
          },
          "swapETHOut(address,uint256,address,uint256,uint256)": {
            "notice": "Swap tokenIn for ETH"
          },
          "swapETHOutWithMultiHops(address[],uint256[],address,uint256,uint256)": {
            "notice": "Swap tokenIn for ETH with multiple hops tokens[tokens.length - 1] must be WETH"
          },
          "swapWithMultiHops(address[],uint256[],address,uint256,uint256)": {
            "notice": "Swap tokenIn for tokenOut with multiple hops"
          },
          "withdraw(address,uint256,address)": {
            "notice": "Withdrw Pair note."
          },
          "withdrawETH(address,uint256,address)": {
            "notice": "Withdrw Pair note and if either token0 or token1 withdrawn is WETH, withdraw from WETH and send ETH to receiver. User who signs the withdraw signature must be the one who calls this function"
          },
          "withdrawMultiPositions(address[],uint256[],address[])": {
            "notice": "Withdraw multiple Pair notes. User who call this function must set approval for all position of each pair in advance"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": ["forge-std/=lib/forge-std/src/"],
      "optimizer": { "enabled": true, "runs": 200 },
      "metadata": { "bytecodeHash": "ipfs" },
      "compilationTarget": { "src/Router.sol": "Router" },
      "evmVersion": "london",
      "libraries": {}
    },
    "sources": {
      "src/Router.sol": {
        "keccak256": "0x64f010c31d0d14f3fc22d0d9a6f69f0d9b78ae6053938df1472a660701481a16",
        "urls": [
          "bzz-raw://9a171c724a852759a2a7c2825ee16eb5b47a1f47916fae68b61428e0b83dde92",
          "dweb:/ipfs/QmQsEWhgkqm2cVaT6SBqmscNp7ZjatS6hdfyyE3f9ezjh6"
        ],
        "license": "AGPL-3.0-only"
      },
      "src/interface/IERC20.sol": {
        "keccak256": "0x51ff9ea85b0f83b9651f80655a00aa2ec4987daff855298fe4a3f24282dac100",
        "urls": [
          "bzz-raw://cfed1e5e479d176e4d9e6a45cb65a20c936ccb302e2143e08f95932f944cd6d8",
          "dweb:/ipfs/Qmem1eNQVJ1mGJWiYT6coCYPJccqLEmz533cFDGPDkU1zS"
        ],
        "license": "MIT"
      },
      "src/interface/IERC20Permit.sol": {
        "keccak256": "0x4a50e7f9a06e623cebe4f4e51052eaa7679028b3342754aba2d10d24c6abda7b",
        "urls": [
          "bzz-raw://a5eacd3700760adb5cd4172f6fd69a76ea2ff8a636d0dae65174ee11f4b92bc5",
          "dweb:/ipfs/Qmaq6m7MYpYUe8F7b4sbPom939xM1wfUvtoRqTZ43KvQTW"
        ],
        "license": "MIT"
      },
      "src/interface/IFactory.sol": {
        "keccak256": "0xe8d5a70aa8f094757d651a162cdb05600dbace6f70c9aaf68d52551c81b0b26a",
        "urls": [
          "bzz-raw://1e7078f64c08c12d096d54893285f98d566572171d242f0c7c6e50243e123fe8",
          "dweb:/ipfs/QmW7sqvvHvEHPiSvartuLWpnWnhxVktPeHzAFVkw2yeyJC"
        ],
        "license": "MIT"
      },
      "src/interface/IPair.sol": {
        "keccak256": "0xa5371d37be748fc644e150a7ff06431be0e88be37a5efd3ea0b45a87b4241c51",
        "urls": [
          "bzz-raw://6f1b79db5eb3a1ccdc6d664fa69fccea067cfb84c93238f332ef37a60e06c6c7",
          "dweb:/ipfs/QmVExJh8Tt1wTKLG5FGUGYkMqX1uKeG4AVgk9UDoZFPLvn"
        ],
        "license": "MIT"
      },
      "src/interface/IWETH.sol": {
        "keccak256": "0x17cebb847163242a19abfdf3d346a5ae8f08f4bbc641309c3224fde211654f2a",
        "urls": [
          "bzz-raw://8768c79f4273411cea39bf2b737b4b32af9eec648ba4ae77340f78988109c61c",
          "dweb:/ipfs/QmWGsyd11VwFuV6z2DiashMV4xFhyREH2ymnfjKwnTx3XS"
        ],
        "license": "MIT"
      },
      "src/lib/SqrtMath.sol": {
        "keccak256": "0x02ab63ab65b170865ded5cef5b7c3f687631d367aba1d2fb45bdbc13e2c7a324",
        "urls": [
          "bzz-raw://385257744e989eca330cbfdf959b17fb0b656b7692a346ea8cecfac2ef5ad465",
          "dweb:/ipfs/QmdR2uuBBHEW78dRSuFhFyz1taSi4KZBSMmo8z6XwHB5kq"
        ],
        "license": "AGPL-2.0"
      },
      "src/lib/TransferHelper.sol": {
        "keccak256": "0xe0e02257681bc57b2f48dee084a993d84a27b73c746155e721744df81d1a43fb",
        "urls": [
          "bzz-raw://62035f13e2a80b4e43edd920e8dd34e4a6ae34508055695b3eeabf48679fde44",
          "dweb:/ipfs/QmVE2W8MhPtA6gnC26qUfa9u9yUg5w42y4H41M9NLMSyaP"
        ],
        "license": "AGPL-2.0"
      }
    },
    "version": 1
  },
  "id": 24
}
